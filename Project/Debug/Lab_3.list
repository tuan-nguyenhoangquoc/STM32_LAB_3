
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000305c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800318c  0800318c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800318c  0800318c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800318c  0800318c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800318c  0800318c  0001318c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003190  08003190  00013190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000064  080031f8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080031f8  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000963d  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abd  00000000  00000000  000296ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002b188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b3a  00000000  00000000  0002c590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b405  00000000  00000000  000430ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825cb  00000000  00000000  0004e4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0a9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d0  00000000  00000000  000d0af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003150 	.word	0x08003150

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003150 	.word	0x08003150

0800014c <isButton1Pressed>:


int TimerForKeyPress = PRESSED_TIME;


int isButton1Pressed() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag==1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag=0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000080 	.word	0x20000080

08000170 <subKeyProcess>:

void subKeyProcess(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	button1_flag=1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <subKeyProcess+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20000080 	.word	0x20000080

08000188 <isButton2Pressed>:

int isButton2Pressed() {
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
	if(button2_flag==1){
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <isButton2Pressed+0x20>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d104      	bne.n	800019e <isButton2Pressed+0x16>
		button2_flag=0;
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <isButton2Pressed+0x20>)
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
		return 1;
 800019a:	2301      	movs	r3, #1
 800019c:	e000      	b.n	80001a0 <isButton2Pressed+0x18>
	}
	return 0;
 800019e:	2300      	movs	r3, #0
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000084 	.word	0x20000084

080001ac <subKeyProcess_2>:

void subKeyProcess_2(){
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
	button2_flag=1;
 80001b0:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <subKeyProcess_2+0x14>)
 80001b2:	2201      	movs	r2, #1
 80001b4:	601a      	str	r2, [r3, #0]
}
 80001b6:	bf00      	nop
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	20000084 	.word	0x20000084

080001c4 <isButton3Pressed>:

int isButton3Pressed() {
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	if(button3_flag==1){
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <isButton3Pressed+0x20>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d104      	bne.n	80001da <isButton3Pressed+0x16>
		button3_flag=0;
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <isButton3Pressed+0x20>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
		return 1;
 80001d6:	2301      	movs	r3, #1
 80001d8:	e000      	b.n	80001dc <isButton3Pressed+0x18>
	}
	return 0;
 80001da:	2300      	movs	r3, #0
}
 80001dc:	4618      	mov	r0, r3
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	20000088 	.word	0x20000088

080001e8 <subKeyProcess_3>:

void subKeyProcess_3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag=1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess_3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000088 	.word	0x20000088

08000200 <getKeyInput>:

void getKeyInput(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	KeyReg0[0]=KeyReg1[0];
 8000204:	4b66      	ldr	r3, [pc, #408]	; (80003a0 <getKeyInput+0x1a0>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a66      	ldr	r2, [pc, #408]	; (80003a4 <getKeyInput+0x1a4>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1[0]=KeyReg2[0];
 800020c:	4b66      	ldr	r3, [pc, #408]	; (80003a8 <getKeyInput+0x1a8>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a63      	ldr	r2, [pc, #396]	; (80003a0 <getKeyInput+0x1a0>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg2[0]=HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin);
 8000214:	2101      	movs	r1, #1
 8000216:	4865      	ldr	r0, [pc, #404]	; (80003ac <getKeyInput+0x1ac>)
 8000218:	f001 ff62 	bl	80020e0 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b61      	ldr	r3, [pc, #388]	; (80003a8 <getKeyInput+0x1a8>)
 8000222:	601a      	str	r2, [r3, #0]
	if((KeyReg0[0] == KeyReg1[0]) && (KeyReg1[0] == KeyReg2[0])){
 8000224:	4b5f      	ldr	r3, [pc, #380]	; (80003a4 <getKeyInput+0x1a4>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b5d      	ldr	r3, [pc, #372]	; (80003a0 <getKeyInput+0x1a0>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	429a      	cmp	r2, r3
 800022e:	d12d      	bne.n	800028c <getKeyInput+0x8c>
 8000230:	4b5b      	ldr	r3, [pc, #364]	; (80003a0 <getKeyInput+0x1a0>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b5c      	ldr	r3, [pc, #368]	; (80003a8 <getKeyInput+0x1a8>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	429a      	cmp	r2, r3
 800023a:	d127      	bne.n	800028c <getKeyInput+0x8c>
		if (KeyReg3[0] != KeyReg2[0]){
 800023c:	4b5c      	ldr	r3, [pc, #368]	; (80003b0 <getKeyInput+0x1b0>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b59      	ldr	r3, [pc, #356]	; (80003a8 <getKeyInput+0x1a8>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	429a      	cmp	r2, r3
 8000246:	d00e      	beq.n	8000266 <getKeyInput+0x66>
			KeyReg3[0] = KeyReg2[0];
 8000248:	4b57      	ldr	r3, [pc, #348]	; (80003a8 <getKeyInput+0x1a8>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a58      	ldr	r2, [pc, #352]	; (80003b0 <getKeyInput+0x1b0>)
 800024e:	6013      	str	r3, [r2, #0]
			if(KeyReg2[0] == PRESSED_STATE){
 8000250:	4b55      	ldr	r3, [pc, #340]	; (80003a8 <getKeyInput+0x1a8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d119      	bne.n	800028c <getKeyInput+0x8c>
				subKeyProcess();
 8000258:	f7ff ff8a 	bl	8000170 <subKeyProcess>
				TimerForKeyPress = PRESSED_TIME;
 800025c:	4b55      	ldr	r3, [pc, #340]	; (80003b4 <getKeyInput+0x1b4>)
 800025e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	e012      	b.n	800028c <getKeyInput+0x8c>
			}
		}
		else{
			TimerForKeyPress--;
 8000266:	4b53      	ldr	r3, [pc, #332]	; (80003b4 <getKeyInput+0x1b4>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a51      	ldr	r2, [pc, #324]	; (80003b4 <getKeyInput+0x1b4>)
 800026e:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress <= 0){
 8000270:	4b50      	ldr	r3, [pc, #320]	; (80003b4 <getKeyInput+0x1b4>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	dc09      	bgt.n	800028c <getKeyInput+0x8c>
				//TODO
				if(KeyReg2[0] == PRESSED_STATE)
 8000278:	4b4b      	ldr	r3, [pc, #300]	; (80003a8 <getKeyInput+0x1a8>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d101      	bne.n	8000284 <getKeyInput+0x84>
					subKeyProcess();
 8000280:	f7ff ff76 	bl	8000170 <subKeyProcess>
				TimerForKeyPress = PRESSED_TIME;
 8000284:	4b4b      	ldr	r3, [pc, #300]	; (80003b4 <getKeyInput+0x1b4>)
 8000286:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800028a:	601a      	str	r2, [r3, #0]
			}
		}
	}

	KeyReg0[1]=KeyReg1[1];
 800028c:	4b44      	ldr	r3, [pc, #272]	; (80003a0 <getKeyInput+0x1a0>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	4a44      	ldr	r2, [pc, #272]	; (80003a4 <getKeyInput+0x1a4>)
 8000292:	6053      	str	r3, [r2, #4]
	KeyReg1[1]=KeyReg2[1];
 8000294:	4b44      	ldr	r3, [pc, #272]	; (80003a8 <getKeyInput+0x1a8>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	4a41      	ldr	r2, [pc, #260]	; (80003a0 <getKeyInput+0x1a0>)
 800029a:	6053      	str	r3, [r2, #4]
	KeyReg2[1]=HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin);
 800029c:	2102      	movs	r1, #2
 800029e:	4843      	ldr	r0, [pc, #268]	; (80003ac <getKeyInput+0x1ac>)
 80002a0:	f001 ff1e 	bl	80020e0 <HAL_GPIO_ReadPin>
 80002a4:	4603      	mov	r3, r0
 80002a6:	461a      	mov	r2, r3
 80002a8:	4b3f      	ldr	r3, [pc, #252]	; (80003a8 <getKeyInput+0x1a8>)
 80002aa:	605a      	str	r2, [r3, #4]
	if((KeyReg0[1] == KeyReg1[1]) && (KeyReg1[1] == KeyReg2[1])){
 80002ac:	4b3d      	ldr	r3, [pc, #244]	; (80003a4 <getKeyInput+0x1a4>)
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	4b3b      	ldr	r3, [pc, #236]	; (80003a0 <getKeyInput+0x1a0>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d12d      	bne.n	8000314 <getKeyInput+0x114>
 80002b8:	4b39      	ldr	r3, [pc, #228]	; (80003a0 <getKeyInput+0x1a0>)
 80002ba:	685a      	ldr	r2, [r3, #4]
 80002bc:	4b3a      	ldr	r3, [pc, #232]	; (80003a8 <getKeyInput+0x1a8>)
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d127      	bne.n	8000314 <getKeyInput+0x114>
		if (KeyReg3[1] != KeyReg2[1]){
 80002c4:	4b3a      	ldr	r3, [pc, #232]	; (80003b0 <getKeyInput+0x1b0>)
 80002c6:	685a      	ldr	r2, [r3, #4]
 80002c8:	4b37      	ldr	r3, [pc, #220]	; (80003a8 <getKeyInput+0x1a8>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d00e      	beq.n	80002ee <getKeyInput+0xee>
			KeyReg3[1] = KeyReg2[1];
 80002d0:	4b35      	ldr	r3, [pc, #212]	; (80003a8 <getKeyInput+0x1a8>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a36      	ldr	r2, [pc, #216]	; (80003b0 <getKeyInput+0x1b0>)
 80002d6:	6053      	str	r3, [r2, #4]
			if(KeyReg2[1] == PRESSED_STATE){
 80002d8:	4b33      	ldr	r3, [pc, #204]	; (80003a8 <getKeyInput+0x1a8>)
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d119      	bne.n	8000314 <getKeyInput+0x114>
				subKeyProcess_2();
 80002e0:	f7ff ff64 	bl	80001ac <subKeyProcess_2>
				TimerForKeyPress = PRESSED_TIME;
 80002e4:	4b33      	ldr	r3, [pc, #204]	; (80003b4 <getKeyInput+0x1b4>)
 80002e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	e012      	b.n	8000314 <getKeyInput+0x114>
			}
		}
		else{
			TimerForKeyPress--;
 80002ee:	4b31      	ldr	r3, [pc, #196]	; (80003b4 <getKeyInput+0x1b4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	3b01      	subs	r3, #1
 80002f4:	4a2f      	ldr	r2, [pc, #188]	; (80003b4 <getKeyInput+0x1b4>)
 80002f6:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress <= 0){
 80002f8:	4b2e      	ldr	r3, [pc, #184]	; (80003b4 <getKeyInput+0x1b4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	dc09      	bgt.n	8000314 <getKeyInput+0x114>
				//TODO
				if(KeyReg2[1] == PRESSED_STATE)
 8000300:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <getKeyInput+0x1a8>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d101      	bne.n	800030c <getKeyInput+0x10c>
					subKeyProcess_2();
 8000308:	f7ff ff50 	bl	80001ac <subKeyProcess_2>
				TimerForKeyPress = PRESSED_TIME;
 800030c:	4b29      	ldr	r3, [pc, #164]	; (80003b4 <getKeyInput+0x1b4>)
 800030e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000312:	601a      	str	r2, [r3, #0]
			}
		}
	}

		KeyReg0[2]=KeyReg1[2];
 8000314:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <getKeyInput+0x1a0>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a22      	ldr	r2, [pc, #136]	; (80003a4 <getKeyInput+0x1a4>)
 800031a:	6093      	str	r3, [r2, #8]
		KeyReg1[2]=KeyReg2[2];
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <getKeyInput+0x1a8>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	4a1f      	ldr	r2, [pc, #124]	; (80003a0 <getKeyInput+0x1a0>)
 8000322:	6093      	str	r3, [r2, #8]
		KeyReg2[2]=HAL_GPIO_ReadPin(Button3_GPIO_Port,Button3_Pin);
 8000324:	2104      	movs	r1, #4
 8000326:	4821      	ldr	r0, [pc, #132]	; (80003ac <getKeyInput+0x1ac>)
 8000328:	f001 feda 	bl	80020e0 <HAL_GPIO_ReadPin>
 800032c:	4603      	mov	r3, r0
 800032e:	461a      	mov	r2, r3
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <getKeyInput+0x1a8>)
 8000332:	609a      	str	r2, [r3, #8]
		if((KeyReg0[2] == KeyReg1[2]) && (KeyReg1[2] == KeyReg2[2])){
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <getKeyInput+0x1a4>)
 8000336:	689a      	ldr	r2, [r3, #8]
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <getKeyInput+0x1a0>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	429a      	cmp	r2, r3
 800033e:	d12d      	bne.n	800039c <getKeyInput+0x19c>
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <getKeyInput+0x1a0>)
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <getKeyInput+0x1a8>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	429a      	cmp	r2, r3
 800034a:	d127      	bne.n	800039c <getKeyInput+0x19c>
			if (KeyReg3[2] != KeyReg2[2]){
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <getKeyInput+0x1b0>)
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <getKeyInput+0x1a8>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	429a      	cmp	r2, r3
 8000356:	d00e      	beq.n	8000376 <getKeyInput+0x176>
				KeyReg3[2] = KeyReg2[2];
 8000358:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <getKeyInput+0x1a8>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <getKeyInput+0x1b0>)
 800035e:	6093      	str	r3, [r2, #8]
				if(KeyReg2[2] == PRESSED_STATE){
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <getKeyInput+0x1a8>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d119      	bne.n	800039c <getKeyInput+0x19c>
					subKeyProcess_3();
 8000368:	f7ff ff3e 	bl	80001e8 <subKeyProcess_3>
					TimerForKeyPress = PRESSED_TIME;
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <getKeyInput+0x1b4>)
 800036e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000372:	601a      	str	r2, [r3, #0]
						subKeyProcess_3();
					TimerForKeyPress = PRESSED_TIME;
				}
			}
		}
}
 8000374:	e012      	b.n	800039c <getKeyInput+0x19c>
				TimerForKeyPress--;
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <getKeyInput+0x1b4>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	3b01      	subs	r3, #1
 800037c:	4a0d      	ldr	r2, [pc, #52]	; (80003b4 <getKeyInput+0x1b4>)
 800037e:	6013      	str	r3, [r2, #0]
				if(TimerForKeyPress <= 0){
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <getKeyInput+0x1b4>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	dc09      	bgt.n	800039c <getKeyInput+0x19c>
					if(KeyReg2[2] == PRESSED_STATE)
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <getKeyInput+0x1a8>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d101      	bne.n	8000394 <getKeyInput+0x194>
						subKeyProcess_3();
 8000390:	f7ff ff2a 	bl	80001e8 <subKeyProcess_3>
					TimerForKeyPress = PRESSED_TIME;
 8000394:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <getKeyInput+0x1b4>)
 8000396:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800039a:	601a      	str	r2, [r3, #0]
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000000c 	.word	0x2000000c
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000018 	.word	0x20000018
 80003ac:	40010c00 	.word	0x40010c00
 80003b0:	20000024 	.word	0x20000024
 80003b4:	20000030 	.word	0x20000030

080003b8 <fsm>:
int remain_time1 = 0;
int remain_time2 = 0;



void fsm(){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	switch(led_status){
 80003bc:	4bac      	ldr	r3, [pc, #688]	; (8000670 <fsm+0x2b8>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b1f      	cmp	r3, #31
 80003c2:	f200 8149 	bhi.w	8000658 <fsm+0x2a0>
 80003c6:	a201      	add	r2, pc, #4	; (adr r2, 80003cc <fsm+0x14>)
 80003c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003cc:	0800044d 	.word	0x0800044d
 80003d0:	08000659 	.word	0x08000659
 80003d4:	08000659 	.word	0x08000659
 80003d8:	08000659 	.word	0x08000659
 80003dc:	08000659 	.word	0x08000659
 80003e0:	08000659 	.word	0x08000659
 80003e4:	08000659 	.word	0x08000659
 80003e8:	08000659 	.word	0x08000659
 80003ec:	08000659 	.word	0x08000659
 80003f0:	08000659 	.word	0x08000659
 80003f4:	08000659 	.word	0x08000659
 80003f8:	08000659 	.word	0x08000659
 80003fc:	08000515 	.word	0x08000515
 8000400:	08000495 	.word	0x08000495
 8000404:	08000659 	.word	0x08000659
 8000408:	08000659 	.word	0x08000659
 800040c:	08000659 	.word	0x08000659
 8000410:	08000659 	.word	0x08000659
 8000414:	08000659 	.word	0x08000659
 8000418:	08000659 	.word	0x08000659
 800041c:	08000659 	.word	0x08000659
 8000420:	080005eb 	.word	0x080005eb
 8000424:	08000659 	.word	0x08000659
 8000428:	08000659 	.word	0x08000659
 800042c:	08000659 	.word	0x08000659
 8000430:	08000659 	.word	0x08000659
 8000434:	08000659 	.word	0x08000659
 8000438:	08000659 	.word	0x08000659
 800043c:	08000659 	.word	0x08000659
 8000440:	08000659 	.word	0x08000659
 8000444:	08000659 	.word	0x08000659
 8000448:	08000585 	.word	0x08000585
	case INIT:
		clear_leds();
 800044c:	f000 ff1e 	bl	800128c <clear_leds>
		led_status = RED_GREEN;
 8000450:	4b87      	ldr	r3, [pc, #540]	; (8000670 <fsm+0x2b8>)
 8000452:	220d      	movs	r2, #13
 8000454:	601a      	str	r2, [r3, #0]
		remain_time1 = RED_time;
 8000456:	4b87      	ldr	r3, [pc, #540]	; (8000674 <fsm+0x2bc>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a87      	ldr	r2, [pc, #540]	; (8000678 <fsm+0x2c0>)
 800045c:	6013      	str	r3, [r2, #0]
		remain_time2 = GREEN_time;
 800045e:	4b87      	ldr	r3, [pc, #540]	; (800067c <fsm+0x2c4>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a87      	ldr	r2, [pc, #540]	; (8000680 <fsm+0x2c8>)
 8000464:	6013      	str	r3, [r2, #0]
		setTimer1(remain_time2*1000);
 8000466:	4b86      	ldr	r3, [pc, #536]	; (8000680 <fsm+0x2c8>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800046e:	fb02 f303 	mul.w	r3, r2, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f001 f940 	bl	80016f8 <setTimer1>
		updateBuffer1(remain_time1);
 8000478:	4b7f      	ldr	r3, [pc, #508]	; (8000678 <fsm+0x2c0>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4618      	mov	r0, r3
 800047e:	f000 febd 	bl	80011fc <updateBuffer1>
		updateBuffer2(remain_time2);
 8000482:	4b7f      	ldr	r3, [pc, #508]	; (8000680 <fsm+0x2c8>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fedc 	bl	8001244 <updateBuffer2>
		setTimer2(10);
 800048c:	200a      	movs	r0, #10
 800048e:	f001 f94f 	bl	8001730 <setTimer2>
		break;
 8000492:	e0ea      	b.n	800066a <fsm+0x2b2>
	case RED_GREEN:
		if(isButton1Pressed() == 1){
 8000494:	f7ff fe5a 	bl	800014c <isButton1Pressed>
 8000498:	4603      	mov	r3, r0
 800049a:	2b01      	cmp	r3, #1
 800049c:	d106      	bne.n	80004ac <fsm+0xf4>
			led_status = DEFAULT;
 800049e:	4b74      	ldr	r3, [pc, #464]	; (8000670 <fsm+0x2b8>)
 80004a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004a4:	601a      	str	r2, [r3, #0]
			mode_status = INIT;
 80004a6:	4b77      	ldr	r3, [pc, #476]	; (8000684 <fsm+0x2cc>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
		}
		led_on(RED_GREEN);
 80004ac:	200d      	movs	r0, #13
 80004ae:	f000 ff17 	bl	80012e0 <led_on>
		if(timer1_flag == 1){
 80004b2:	4b75      	ldr	r3, [pc, #468]	; (8000688 <fsm+0x2d0>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d112      	bne.n	80004e0 <fsm+0x128>
			led_status = RED_YELLOW;
 80004ba:	4b6d      	ldr	r3, [pc, #436]	; (8000670 <fsm+0x2b8>)
 80004bc:	220c      	movs	r2, #12
 80004be:	601a      	str	r2, [r3, #0]
			remain_time2 = YELLOW_time;
 80004c0:	4b72      	ldr	r3, [pc, #456]	; (800068c <fsm+0x2d4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a6e      	ldr	r2, [pc, #440]	; (8000680 <fsm+0x2c8>)
 80004c6:	6013      	str	r3, [r2, #0]
			setTimer1(remain_time2*1000);
 80004c8:	4b6d      	ldr	r3, [pc, #436]	; (8000680 <fsm+0x2c8>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004d0:	fb02 f303 	mul.w	r3, r2, r3
 80004d4:	4618      	mov	r0, r3
 80004d6:	f001 f90f 	bl	80016f8 <setTimer1>
			setTimer2(10);
 80004da:	200a      	movs	r0, #10
 80004dc:	f001 f928 	bl	8001730 <setTimer2>
		}
		if(timer2_flag == 1){
 80004e0:	4b6b      	ldr	r3, [pc, #428]	; (8000690 <fsm+0x2d8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	f040 80b9 	bne.w	800065c <fsm+0x2a4>
			updateBuffer1(remain_time1--);
 80004ea:	4b63      	ldr	r3, [pc, #396]	; (8000678 <fsm+0x2c0>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	1e5a      	subs	r2, r3, #1
 80004f0:	4961      	ldr	r1, [pc, #388]	; (8000678 <fsm+0x2c0>)
 80004f2:	600a      	str	r2, [r1, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fe81 	bl	80011fc <updateBuffer1>
			updateBuffer2(remain_time2--);
 80004fa:	4b61      	ldr	r3, [pc, #388]	; (8000680 <fsm+0x2c8>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	1e5a      	subs	r2, r3, #1
 8000500:	495f      	ldr	r1, [pc, #380]	; (8000680 <fsm+0x2c8>)
 8000502:	600a      	str	r2, [r1, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fe9d 	bl	8001244 <updateBuffer2>
			setTimer2(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050e:	f001 f90f 	bl	8001730 <setTimer2>
		}
		break;
 8000512:	e0a3      	b.n	800065c <fsm+0x2a4>
	case RED_YELLOW:
		led_on(RED_YELLOW);
 8000514:	200c      	movs	r0, #12
 8000516:	f000 fee3 	bl	80012e0 <led_on>
		if(timer1_flag == 1){
 800051a:	4b5b      	ldr	r3, [pc, #364]	; (8000688 <fsm+0x2d0>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d116      	bne.n	8000550 <fsm+0x198>
			led_status = GREEN_RED;
 8000522:	4b53      	ldr	r3, [pc, #332]	; (8000670 <fsm+0x2b8>)
 8000524:	221f      	movs	r2, #31
 8000526:	601a      	str	r2, [r3, #0]
			remain_time1 = GREEN_time;
 8000528:	4b54      	ldr	r3, [pc, #336]	; (800067c <fsm+0x2c4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a52      	ldr	r2, [pc, #328]	; (8000678 <fsm+0x2c0>)
 800052e:	6013      	str	r3, [r2, #0]
			remain_time2 = RED_time;
 8000530:	4b50      	ldr	r3, [pc, #320]	; (8000674 <fsm+0x2bc>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a52      	ldr	r2, [pc, #328]	; (8000680 <fsm+0x2c8>)
 8000536:	6013      	str	r3, [r2, #0]
			setTimer1(remain_time1*1000);
 8000538:	4b4f      	ldr	r3, [pc, #316]	; (8000678 <fsm+0x2c0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000540:	fb02 f303 	mul.w	r3, r2, r3
 8000544:	4618      	mov	r0, r3
 8000546:	f001 f8d7 	bl	80016f8 <setTimer1>
			setTimer2(10);
 800054a:	200a      	movs	r0, #10
 800054c:	f001 f8f0 	bl	8001730 <setTimer2>
		}
		if(timer2_flag == 1){
 8000550:	4b4f      	ldr	r3, [pc, #316]	; (8000690 <fsm+0x2d8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	f040 8083 	bne.w	8000660 <fsm+0x2a8>
			updateBuffer1(remain_time1--);
 800055a:	4b47      	ldr	r3, [pc, #284]	; (8000678 <fsm+0x2c0>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	1e5a      	subs	r2, r3, #1
 8000560:	4945      	ldr	r1, [pc, #276]	; (8000678 <fsm+0x2c0>)
 8000562:	600a      	str	r2, [r1, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fe49 	bl	80011fc <updateBuffer1>
			updateBuffer2(remain_time2--);
 800056a:	4b45      	ldr	r3, [pc, #276]	; (8000680 <fsm+0x2c8>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	1e5a      	subs	r2, r3, #1
 8000570:	4943      	ldr	r1, [pc, #268]	; (8000680 <fsm+0x2c8>)
 8000572:	600a      	str	r2, [r1, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fe65 	bl	8001244 <updateBuffer2>
			setTimer2(1000);
 800057a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057e:	f001 f8d7 	bl	8001730 <setTimer2>
		}
		break;
 8000582:	e06d      	b.n	8000660 <fsm+0x2a8>
	case GREEN_RED:
		led_on(GREEN_RED);
 8000584:	201f      	movs	r0, #31
 8000586:	f000 feab 	bl	80012e0 <led_on>
		if(timer1_flag == 1){
 800058a:	4b3f      	ldr	r3, [pc, #252]	; (8000688 <fsm+0x2d0>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d112      	bne.n	80005b8 <fsm+0x200>
			led_status = YELLOW_RED;
 8000592:	4b37      	ldr	r3, [pc, #220]	; (8000670 <fsm+0x2b8>)
 8000594:	2215      	movs	r2, #21
 8000596:	601a      	str	r2, [r3, #0]
			remain_time1 = YELLOW_time;
 8000598:	4b3c      	ldr	r3, [pc, #240]	; (800068c <fsm+0x2d4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a36      	ldr	r2, [pc, #216]	; (8000678 <fsm+0x2c0>)
 800059e:	6013      	str	r3, [r2, #0]
			setTimer1(remain_time1*1000);
 80005a0:	4b35      	ldr	r3, [pc, #212]	; (8000678 <fsm+0x2c0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a8:	fb02 f303 	mul.w	r3, r2, r3
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 f8a3 	bl	80016f8 <setTimer1>
			setTimer2(10);
 80005b2:	200a      	movs	r0, #10
 80005b4:	f001 f8bc 	bl	8001730 <setTimer2>
		}
		if(timer2_flag == 1){
 80005b8:	4b35      	ldr	r3, [pc, #212]	; (8000690 <fsm+0x2d8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d151      	bne.n	8000664 <fsm+0x2ac>
			updateBuffer1(remain_time1--);
 80005c0:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <fsm+0x2c0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	1e5a      	subs	r2, r3, #1
 80005c6:	492c      	ldr	r1, [pc, #176]	; (8000678 <fsm+0x2c0>)
 80005c8:	600a      	str	r2, [r1, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fe16 	bl	80011fc <updateBuffer1>
			updateBuffer2(remain_time2--);
 80005d0:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <fsm+0x2c8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	1e5a      	subs	r2, r3, #1
 80005d6:	492a      	ldr	r1, [pc, #168]	; (8000680 <fsm+0x2c8>)
 80005d8:	600a      	str	r2, [r1, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fe32 	bl	8001244 <updateBuffer2>
			setTimer2(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	f001 f8a4 	bl	8001730 <setTimer2>
		}
		break;
 80005e8:	e03c      	b.n	8000664 <fsm+0x2ac>
	case YELLOW_RED:
		led_on(YELLOW_RED);
 80005ea:	2015      	movs	r0, #21
 80005ec:	f000 fe78 	bl	80012e0 <led_on>
		if(timer1_flag == 1){
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <fsm+0x2d0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d116      	bne.n	8000626 <fsm+0x26e>
			led_status = RED_GREEN;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <fsm+0x2b8>)
 80005fa:	220d      	movs	r2, #13
 80005fc:	601a      	str	r2, [r3, #0]
			remain_time1 = RED_time;
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <fsm+0x2bc>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <fsm+0x2c0>)
 8000604:	6013      	str	r3, [r2, #0]
			remain_time2 = GREEN_time;
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <fsm+0x2c4>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a1d      	ldr	r2, [pc, #116]	; (8000680 <fsm+0x2c8>)
 800060c:	6013      	str	r3, [r2, #0]
			setTimer1(remain_time1*1000);
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <fsm+0x2c0>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000616:	fb02 f303 	mul.w	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f001 f86c 	bl	80016f8 <setTimer1>
			setTimer2(10);
 8000620:	200a      	movs	r0, #10
 8000622:	f001 f885 	bl	8001730 <setTimer2>
		}
		if(timer2_flag == 1){
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <fsm+0x2d8>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d11c      	bne.n	8000668 <fsm+0x2b0>
			updateBuffer1(remain_time1--);
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <fsm+0x2c0>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	4910      	ldr	r1, [pc, #64]	; (8000678 <fsm+0x2c0>)
 8000636:	600a      	str	r2, [r1, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fddf 	bl	80011fc <updateBuffer1>
			updateBuffer2(remain_time2--);
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <fsm+0x2c8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	1e5a      	subs	r2, r3, #1
 8000644:	490e      	ldr	r1, [pc, #56]	; (8000680 <fsm+0x2c8>)
 8000646:	600a      	str	r2, [r1, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fdfb 	bl	8001244 <updateBuffer2>
			setTimer2(1000);
 800064e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000652:	f001 f86d 	bl	8001730 <setTimer2>
		}
		break;
 8000656:	e007      	b.n	8000668 <fsm+0x2b0>

	default:
		break;
 8000658:	bf00      	nop
 800065a:	e006      	b.n	800066a <fsm+0x2b2>
		break;
 800065c:	bf00      	nop
 800065e:	e004      	b.n	800066a <fsm+0x2b2>
		break;
 8000660:	bf00      	nop
 8000662:	e002      	b.n	800066a <fsm+0x2b2>
		break;
 8000664:	bf00      	nop
 8000666:	e000      	b.n	800066a <fsm+0x2b2>
		break;
 8000668:	bf00      	nop
	}
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000008c 	.word	0x2000008c
 8000674:	20000038 	.word	0x20000038
 8000678:	20000090 	.word	0x20000090
 800067c:	20000040 	.word	0x20000040
 8000680:	20000094 	.word	0x20000094
 8000684:	20000034 	.word	0x20000034
 8000688:	200000a0 	.word	0x200000a0
 800068c:	2000003c 	.word	0x2000003c
 8000690:	200000a8 	.word	0x200000a8

08000694 <blink_2hz>:


int ready_to_move = 1;
int index = 0;

void blink_2hz(int mode){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

	if(timer6_flag == 1){
 800069c:	4b46      	ldr	r3, [pc, #280]	; (80007b8 <blink_2hz+0x124>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	f040 8082 	bne.w	80007aa <blink_2hz+0x116>
	switch(mode){
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	d057      	beq.n	800075c <blink_2hz+0xc8>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	dc7d      	bgt.n	80007ae <blink_2hz+0x11a>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d003      	beq.n	80006c0 <blink_2hz+0x2c>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d027      	beq.n	800070e <blink_2hz+0x7a>
			HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
			HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
			setTimer6(500);
		break;
	default:
			break;
 80006be:	e076      	b.n	80007ae <blink_2hz+0x11a>
			HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 80006c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c4:	483d      	ldr	r0, [pc, #244]	; (80007bc <blink_2hz+0x128>)
 80006c6:	f001 fd3a 	bl	800213e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 80006ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ce:	483b      	ldr	r0, [pc, #236]	; (80007bc <blink_2hz+0x128>)
 80006d0:	f001 fd35 	bl	800213e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006da:	4838      	ldr	r0, [pc, #224]	; (80007bc <blink_2hz+0x128>)
 80006dc:	f001 fd17 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e6:	4835      	ldr	r0, [pc, #212]	; (80007bc <blink_2hz+0x128>)
 80006e8:	f001 fd11 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f2:	4832      	ldr	r0, [pc, #200]	; (80007bc <blink_2hz+0x128>)
 80006f4:	f001 fd0b 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fe:	482f      	ldr	r0, [pc, #188]	; (80007bc <blink_2hz+0x128>)
 8000700:	f001 fd05 	bl	800210e <HAL_GPIO_WritePin>
			setTimer6(500);
 8000704:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000708:	f001 f882 	bl	8001810 <setTimer6>
		break;
 800070c:	e050      	b.n	80007b0 <blink_2hz+0x11c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000714:	4829      	ldr	r0, [pc, #164]	; (80007bc <blink_2hz+0x128>)
 8000716:	f001 fcfa 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000720:	4826      	ldr	r0, [pc, #152]	; (80007bc <blink_2hz+0x128>)
 8000722:	f001 fcf4 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 8000726:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800072a:	4824      	ldr	r0, [pc, #144]	; (80007bc <blink_2hz+0x128>)
 800072c:	f001 fd07 	bl	800213e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 8000730:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000734:	4821      	ldr	r0, [pc, #132]	; (80007bc <blink_2hz+0x128>)
 8000736:	f001 fd02 	bl	800213e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000740:	481e      	ldr	r0, [pc, #120]	; (80007bc <blink_2hz+0x128>)
 8000742:	f001 fce4 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074c:	481b      	ldr	r0, [pc, #108]	; (80007bc <blink_2hz+0x128>)
 800074e:	f001 fcde 	bl	800210e <HAL_GPIO_WritePin>
			setTimer6(500);
 8000752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000756:	f001 f85b 	bl	8001810 <setTimer6>
		break;
 800075a:	e029      	b.n	80007b0 <blink_2hz+0x11c>
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000762:	4816      	ldr	r0, [pc, #88]	; (80007bc <blink_2hz+0x128>)
 8000764:	f001 fcd3 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076e:	4813      	ldr	r0, [pc, #76]	; (80007bc <blink_2hz+0x128>)
 8000770:	f001 fccd 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800077a:	4810      	ldr	r0, [pc, #64]	; (80007bc <blink_2hz+0x128>)
 800077c:	f001 fcc7 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <blink_2hz+0x128>)
 8000788:	f001 fcc1 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 800078c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000790:	480a      	ldr	r0, [pc, #40]	; (80007bc <blink_2hz+0x128>)
 8000792:	f001 fcd4 	bl	800213e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8000796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079a:	4808      	ldr	r0, [pc, #32]	; (80007bc <blink_2hz+0x128>)
 800079c:	f001 fccf 	bl	800213e <HAL_GPIO_TogglePin>
			setTimer6(500);
 80007a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a4:	f001 f834 	bl	8001810 <setTimer6>
		break;
 80007a8:	e002      	b.n	80007b0 <blink_2hz+0x11c>
	}
	}
 80007aa:	bf00      	nop
 80007ac:	e000      	b.n	80007b0 <blink_2hz+0x11c>
			break;
 80007ae:	bf00      	nop
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000c8 	.word	0x200000c8
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <sub_display7SEG>:

void sub_display7SEG(){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	index = index + 0;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <sub_display7SEG+0x5c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a14      	ldr	r2, [pc, #80]	; (800081c <sub_display7SEG+0x5c>)
 80007ca:	6013      	str	r3, [r2, #0]
	if(timer5_flag == 1){
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <sub_display7SEG+0x60>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d11c      	bne.n	800080e <sub_display7SEG+0x4e>
		update7SEG(index);
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <sub_display7SEG+0x5c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fc9f 	bl	800111c <update7SEG>
		update7SEG2(index);
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <sub_display7SEG+0x5c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fcd2 	bl	800118c <update7SEG2>
		index = index + 1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <sub_display7SEG+0x5c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	4a0b      	ldr	r2, [pc, #44]	; (800081c <sub_display7SEG+0x5c>)
 80007f0:	6013      	str	r3, [r2, #0]
		index = index % 4;
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <sub_display7SEG+0x5c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	425a      	negs	r2, r3
 80007f8:	f003 0303 	and.w	r3, r3, #3
 80007fc:	f002 0203 	and.w	r2, r2, #3
 8000800:	bf58      	it	pl
 8000802:	4253      	negpl	r3, r2
 8000804:	4a05      	ldr	r2, [pc, #20]	; (800081c <sub_display7SEG+0x5c>)
 8000806:	6013      	str	r3, [r2, #0]
		setTimer5(250);
 8000808:	20fa      	movs	r0, #250	; 0xfa
 800080a:	f000 ffe5 	bl	80017d8 <setTimer5>
	}
	blink_2hz(mode_status);
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <sub_display7SEG+0x64>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff3e 	bl	8000694 <blink_2hz>
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000098 	.word	0x20000098
 8000820:	200000c0 	.word	0x200000c0
 8000824:	20000034 	.word	0x20000034

08000828 <fsm_manual_run>:

void fsm_manual_run(){
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	switch(mode_status){
 800082c:	4b7f      	ldr	r3, [pc, #508]	; (8000a2c <fsm_manual_run+0x204>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b04      	cmp	r3, #4
 8000832:	f200 80f1 	bhi.w	8000a18 <fsm_manual_run+0x1f0>
 8000836:	a201      	add	r2, pc, #4	; (adr r2, 800083c <fsm_manual_run+0x14>)
 8000838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083c:	08000851 	.word	0x08000851
 8000840:	08000a19 	.word	0x08000a19
 8000844:	08000859 	.word	0x08000859
 8000848:	080008d9 	.word	0x080008d9
 800084c:	08000957 	.word	0x08000957
		case INIT:
			mode_status = MODE_2;
 8000850:	4b76      	ldr	r3, [pc, #472]	; (8000a2c <fsm_manual_run+0x204>)
 8000852:	2202      	movs	r2, #2
 8000854:	601a      	str	r2, [r3, #0]
			break;
 8000856:	e0e6      	b.n	8000a26 <fsm_manual_run+0x1fe>

		case MODE_2:
			updateBuffer1(mode_status);
 8000858:	4b74      	ldr	r3, [pc, #464]	; (8000a2c <fsm_manual_run+0x204>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fccd 	bl	80011fc <updateBuffer1>
			updateBuffer2(RED_time);
 8000862:	4b73      	ldr	r3, [pc, #460]	; (8000a30 <fsm_manual_run+0x208>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fcec 	bl	8001244 <updateBuffer2>
			sub_display7SEG();
 800086c:	f7ff ffa8 	bl	80007c0 <sub_display7SEG>

			if(isButton1Pressed() == 1){
 8000870:	f7ff fc6c 	bl	800014c <isButton1Pressed>
 8000874:	4603      	mov	r3, r0
 8000876:	2b01      	cmp	r3, #1
 8000878:	d10a      	bne.n	8000890 <fsm_manual_run+0x68>
				if(ready_to_move == 1)
 800087a:	4b6e      	ldr	r3, [pc, #440]	; (8000a34 <fsm_manual_run+0x20c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d103      	bne.n	800088a <fsm_manual_run+0x62>
					mode_status = MODE_3;
 8000882:	4b6a      	ldr	r3, [pc, #424]	; (8000a2c <fsm_manual_run+0x204>)
 8000884:	2203      	movs	r2, #3
 8000886:	601a      	str	r2, [r3, #0]
					ready_to_move = 0;
				}
				if(isButton3Pressed() == 1)
					ready_to_move = 1;
			}
			break;
 8000888:	e0c8      	b.n	8000a1c <fsm_manual_run+0x1f4>
				else isButton1Pressed();
 800088a:	f7ff fc5f 	bl	800014c <isButton1Pressed>
			break;
 800088e:	e0c5      	b.n	8000a1c <fsm_manual_run+0x1f4>
				if(isButton2Pressed() == 1){
 8000890:	f7ff fc7a 	bl	8000188 <isButton2Pressed>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d114      	bne.n	80008c4 <fsm_manual_run+0x9c>
					RED_time = RED_time % 99 + 1;
 800089a:	4b65      	ldr	r3, [pc, #404]	; (8000a30 <fsm_manual_run+0x208>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	4b66      	ldr	r3, [pc, #408]	; (8000a38 <fsm_manual_run+0x210>)
 80008a0:	fb83 1302 	smull	r1, r3, r3, r2
 80008a4:	4413      	add	r3, r2
 80008a6:	1199      	asrs	r1, r3, #6
 80008a8:	17d3      	asrs	r3, r2, #31
 80008aa:	1ac9      	subs	r1, r1, r3
 80008ac:	460b      	mov	r3, r1
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	440b      	add	r3, r1
 80008b2:	0159      	lsls	r1, r3, #5
 80008b4:	440b      	add	r3, r1
 80008b6:	1ad1      	subs	r1, r2, r3
 80008b8:	1c4b      	adds	r3, r1, #1
 80008ba:	4a5d      	ldr	r2, [pc, #372]	; (8000a30 <fsm_manual_run+0x208>)
 80008bc:	6013      	str	r3, [r2, #0]
					ready_to_move = 0;
 80008be:	4b5d      	ldr	r3, [pc, #372]	; (8000a34 <fsm_manual_run+0x20c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
				if(isButton3Pressed() == 1)
 80008c4:	f7ff fc7e 	bl	80001c4 <isButton3Pressed>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	f040 80a6 	bne.w	8000a1c <fsm_manual_run+0x1f4>
					ready_to_move = 1;
 80008d0:	4b58      	ldr	r3, [pc, #352]	; (8000a34 <fsm_manual_run+0x20c>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	601a      	str	r2, [r3, #0]
			break;
 80008d6:	e0a1      	b.n	8000a1c <fsm_manual_run+0x1f4>

		case MODE_3:
			updateBuffer1(mode_status);
 80008d8:	4b54      	ldr	r3, [pc, #336]	; (8000a2c <fsm_manual_run+0x204>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fc8d 	bl	80011fc <updateBuffer1>
			updateBuffer2(YELLOW_time);
 80008e2:	4b56      	ldr	r3, [pc, #344]	; (8000a3c <fsm_manual_run+0x214>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fcac 	bl	8001244 <updateBuffer2>
			sub_display7SEG();
 80008ec:	f7ff ff68 	bl	80007c0 <sub_display7SEG>
			if(isButton1Pressed() == 1){
 80008f0:	f7ff fc2c 	bl	800014c <isButton1Pressed>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d10a      	bne.n	8000910 <fsm_manual_run+0xe8>
				if(ready_to_move == 1)
 80008fa:	4b4e      	ldr	r3, [pc, #312]	; (8000a34 <fsm_manual_run+0x20c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d103      	bne.n	800090a <fsm_manual_run+0xe2>
					mode_status = MODE_4;
 8000902:	4b4a      	ldr	r3, [pc, #296]	; (8000a2c <fsm_manual_run+0x204>)
 8000904:	2204      	movs	r2, #4
 8000906:	601a      	str	r2, [r3, #0]

				}
				if(isButton3Pressed() == 1)
					ready_to_move = 1;
			}
			break;
 8000908:	e08a      	b.n	8000a20 <fsm_manual_run+0x1f8>
				else isButton1Pressed();
 800090a:	f7ff fc1f 	bl	800014c <isButton1Pressed>
			break;
 800090e:	e087      	b.n	8000a20 <fsm_manual_run+0x1f8>
				if(isButton2Pressed() == 1){
 8000910:	f7ff fc3a 	bl	8000188 <isButton2Pressed>
 8000914:	4603      	mov	r3, r0
 8000916:	2b01      	cmp	r3, #1
 8000918:	d114      	bne.n	8000944 <fsm_manual_run+0x11c>
					YELLOW_time = YELLOW_time % 99 + 1;
 800091a:	4b48      	ldr	r3, [pc, #288]	; (8000a3c <fsm_manual_run+0x214>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b46      	ldr	r3, [pc, #280]	; (8000a38 <fsm_manual_run+0x210>)
 8000920:	fb83 1302 	smull	r1, r3, r3, r2
 8000924:	4413      	add	r3, r2
 8000926:	1199      	asrs	r1, r3, #6
 8000928:	17d3      	asrs	r3, r2, #31
 800092a:	1ac9      	subs	r1, r1, r3
 800092c:	460b      	mov	r3, r1
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	440b      	add	r3, r1
 8000932:	0159      	lsls	r1, r3, #5
 8000934:	440b      	add	r3, r1
 8000936:	1ad1      	subs	r1, r2, r3
 8000938:	1c4b      	adds	r3, r1, #1
 800093a:	4a40      	ldr	r2, [pc, #256]	; (8000a3c <fsm_manual_run+0x214>)
 800093c:	6013      	str	r3, [r2, #0]
					ready_to_move = 0;
 800093e:	4b3d      	ldr	r3, [pc, #244]	; (8000a34 <fsm_manual_run+0x20c>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
				if(isButton3Pressed() == 1)
 8000944:	f7ff fc3e 	bl	80001c4 <isButton3Pressed>
 8000948:	4603      	mov	r3, r0
 800094a:	2b01      	cmp	r3, #1
 800094c:	d168      	bne.n	8000a20 <fsm_manual_run+0x1f8>
					ready_to_move = 1;
 800094e:	4b39      	ldr	r3, [pc, #228]	; (8000a34 <fsm_manual_run+0x20c>)
 8000950:	2201      	movs	r2, #1
 8000952:	601a      	str	r2, [r3, #0]
			break;
 8000954:	e064      	b.n	8000a20 <fsm_manual_run+0x1f8>

		case MODE_4:

			updateBuffer1(mode_status);
 8000956:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <fsm_manual_run+0x204>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fc4e 	bl	80011fc <updateBuffer1>
			updateBuffer2(GREEN_time);
 8000960:	4b37      	ldr	r3, [pc, #220]	; (8000a40 <fsm_manual_run+0x218>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fc6d 	bl	8001244 <updateBuffer2>
			sub_display7SEG();
 800096a:	f7ff ff29 	bl	80007c0 <sub_display7SEG>
			if(isButton1Pressed() == 1){
 800096e:	f7ff fbed 	bl	800014c <isButton1Pressed>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d12c      	bne.n	80009d2 <fsm_manual_run+0x1aa>
				if(ready_to_move == 1){
 8000978:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <fsm_manual_run+0x20c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d125      	bne.n	80009cc <fsm_manual_run+0x1a4>
					mode_status = DEFAULT;
 8000980:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <fsm_manual_run+0x204>)
 8000982:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000986:	601a      	str	r2, [r3, #0]
					led_status = RED_GREEN;
 8000988:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <fsm_manual_run+0x21c>)
 800098a:	220d      	movs	r2, #13
 800098c:	601a      	str	r2, [r3, #0]
					remain_time1 = RED_time;
 800098e:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <fsm_manual_run+0x208>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a2d      	ldr	r2, [pc, #180]	; (8000a48 <fsm_manual_run+0x220>)
 8000994:	6013      	str	r3, [r2, #0]
					remain_time2 = GREEN_time;
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <fsm_manual_run+0x218>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a2c      	ldr	r2, [pc, #176]	; (8000a4c <fsm_manual_run+0x224>)
 800099c:	6013      	str	r3, [r2, #0]
					setTimer1(remain_time2*1000);
 800099e:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <fsm_manual_run+0x224>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a6:	fb02 f303 	mul.w	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fea4 	bl	80016f8 <setTimer1>
					updateBuffer1(remain_time1);
 80009b0:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <fsm_manual_run+0x220>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fc21 	bl	80011fc <updateBuffer1>
					updateBuffer2(remain_time2);
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <fsm_manual_run+0x224>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 fc40 	bl	8001244 <updateBuffer2>
					setTimer2(10);
 80009c4:	200a      	movs	r0, #10
 80009c6:	f000 feb3 	bl	8001730 <setTimer2>

				}
				if(isButton3Pressed() == 1)
					ready_to_move = 1;
			}
			break;
 80009ca:	e02b      	b.n	8000a24 <fsm_manual_run+0x1fc>
				else isButton1Pressed();
 80009cc:	f7ff fbbe 	bl	800014c <isButton1Pressed>
			break;
 80009d0:	e028      	b.n	8000a24 <fsm_manual_run+0x1fc>
				if(isButton2Pressed() == 1){
 80009d2:	f7ff fbd9 	bl	8000188 <isButton2Pressed>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d114      	bne.n	8000a06 <fsm_manual_run+0x1de>
					GREEN_time = GREEN_time % 99 + 1;
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <fsm_manual_run+0x218>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <fsm_manual_run+0x210>)
 80009e2:	fb83 1302 	smull	r1, r3, r3, r2
 80009e6:	4413      	add	r3, r2
 80009e8:	1199      	asrs	r1, r3, #6
 80009ea:	17d3      	asrs	r3, r2, #31
 80009ec:	1ac9      	subs	r1, r1, r3
 80009ee:	460b      	mov	r3, r1
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	440b      	add	r3, r1
 80009f4:	0159      	lsls	r1, r3, #5
 80009f6:	440b      	add	r3, r1
 80009f8:	1ad1      	subs	r1, r2, r3
 80009fa:	1c4b      	adds	r3, r1, #1
 80009fc:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <fsm_manual_run+0x218>)
 80009fe:	6013      	str	r3, [r2, #0]
					ready_to_move = 0;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <fsm_manual_run+0x20c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
				if(isButton3Pressed() == 1)
 8000a06:	f7ff fbdd 	bl	80001c4 <isButton3Pressed>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d109      	bne.n	8000a24 <fsm_manual_run+0x1fc>
					ready_to_move = 1;
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <fsm_manual_run+0x20c>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	601a      	str	r2, [r3, #0]
			break;
 8000a16:	e005      	b.n	8000a24 <fsm_manual_run+0x1fc>

		default:
			break;
 8000a18:	bf00      	nop
 8000a1a:	e004      	b.n	8000a26 <fsm_manual_run+0x1fe>
			break;
 8000a1c:	bf00      	nop
 8000a1e:	e002      	b.n	8000a26 <fsm_manual_run+0x1fe>
			break;
 8000a20:	bf00      	nop
 8000a22:	e000      	b.n	8000a26 <fsm_manual_run+0x1fe>
			break;
 8000a24:	bf00      	nop
		}
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000034 	.word	0x20000034
 8000a30:	20000038 	.word	0x20000038
 8000a34:	20000044 	.word	0x20000044
 8000a38:	a57eb503 	.word	0xa57eb503
 8000a3c:	2000003c 	.word	0x2000003c
 8000a40:	20000040 	.word	0x20000040
 8000a44:	2000008c 	.word	0x2000008c
 8000a48:	20000090 	.word	0x20000090
 8000a4c:	20000094 	.word	0x20000094

08000a50 <display7SEG>:
const int MAX_LED = 4;
int index_led = 0;
int led_buffer[2] = {1, 2};
int led_buffer2[2] = {3, 4};

void display7SEG(int num){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b09      	cmp	r3, #9
 8000a5c:	f200 8180 	bhi.w	8000d60 <display7SEG+0x310>
 8000a60:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <display7SEG+0x18>)
 8000a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a66:	bf00      	nop
 8000a68:	08000a91 	.word	0x08000a91
 8000a6c:	08000ad9 	.word	0x08000ad9
 8000a70:	08000b21 	.word	0x08000b21
 8000a74:	08000b69 	.word	0x08000b69
 8000a78:	08000bb1 	.word	0x08000bb1
 8000a7c:	08000bf9 	.word	0x08000bf9
 8000a80:	08000c41 	.word	0x08000c41
 8000a84:	08000c89 	.word	0x08000c89
 8000a88:	08000cd1 	.word	0x08000cd1
 8000a8c:	08000d19 	.word	0x08000d19
	switch(num){
	case 0:
		  HAL_GPIO_WritePin(Led_a_GPIO_Port, Led_a_Pin, RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2102      	movs	r1, #2
 8000a94:	48b5      	ldr	r0, [pc, #724]	; (8000d6c <display7SEG+0x31c>)
 8000a96:	f001 fb3a 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b_GPIO_Port, Led_b_Pin, RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	48b3      	ldr	r0, [pc, #716]	; (8000d6c <display7SEG+0x31c>)
 8000aa0:	f001 fb35 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c_GPIO_Port, Led_c_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	48b0      	ldr	r0, [pc, #704]	; (8000d6c <display7SEG+0x31c>)
 8000aaa:	f001 fb30 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d_GPIO_Port, Led_d_Pin, RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	48ae      	ldr	r0, [pc, #696]	; (8000d6c <display7SEG+0x31c>)
 8000ab4:	f001 fb2b 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e_GPIO_Port, Led_e_Pin, RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2120      	movs	r1, #32
 8000abc:	48ab      	ldr	r0, [pc, #684]	; (8000d6c <display7SEG+0x31c>)
 8000abe:	f001 fb26 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f_GPIO_Port, Led_f_Pin, RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	48a9      	ldr	r0, [pc, #676]	; (8000d6c <display7SEG+0x31c>)
 8000ac8:	f001 fb21 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g_GPIO_Port, Led_g_Pin, SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	48a6      	ldr	r0, [pc, #664]	; (8000d6c <display7SEG+0x31c>)
 8000ad2:	f001 fb1c 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000ad6:	e144      	b.n	8000d62 <display7SEG+0x312>
	case 1:
		  HAL_GPIO_WritePin(Led_a_GPIO_Port, Led_a_Pin, SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2102      	movs	r1, #2
 8000adc:	48a3      	ldr	r0, [pc, #652]	; (8000d6c <display7SEG+0x31c>)
 8000ade:	f001 fb16 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b_GPIO_Port, Led_b_Pin, RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	48a1      	ldr	r0, [pc, #644]	; (8000d6c <display7SEG+0x31c>)
 8000ae8:	f001 fb11 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c_GPIO_Port, Led_c_Pin, RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2108      	movs	r1, #8
 8000af0:	489e      	ldr	r0, [pc, #632]	; (8000d6c <display7SEG+0x31c>)
 8000af2:	f001 fb0c 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d_GPIO_Port, Led_d_Pin, SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2110      	movs	r1, #16
 8000afa:	489c      	ldr	r0, [pc, #624]	; (8000d6c <display7SEG+0x31c>)
 8000afc:	f001 fb07 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e_GPIO_Port, Led_e_Pin, SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2120      	movs	r1, #32
 8000b04:	4899      	ldr	r0, [pc, #612]	; (8000d6c <display7SEG+0x31c>)
 8000b06:	f001 fb02 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f_GPIO_Port, Led_f_Pin, SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2140      	movs	r1, #64	; 0x40
 8000b0e:	4897      	ldr	r0, [pc, #604]	; (8000d6c <display7SEG+0x31c>)
 8000b10:	f001 fafd 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g_GPIO_Port, Led_g_Pin, SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	4894      	ldr	r0, [pc, #592]	; (8000d6c <display7SEG+0x31c>)
 8000b1a:	f001 faf8 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000b1e:	e120      	b.n	8000d62 <display7SEG+0x312>
	case 2:
		  HAL_GPIO_WritePin(Led_a_GPIO_Port, Led_a_Pin, RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2102      	movs	r1, #2
 8000b24:	4891      	ldr	r0, [pc, #580]	; (8000d6c <display7SEG+0x31c>)
 8000b26:	f001 faf2 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b_GPIO_Port, Led_b_Pin, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	488f      	ldr	r0, [pc, #572]	; (8000d6c <display7SEG+0x31c>)
 8000b30:	f001 faed 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c_GPIO_Port, Led_c_Pin, SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2108      	movs	r1, #8
 8000b38:	488c      	ldr	r0, [pc, #560]	; (8000d6c <display7SEG+0x31c>)
 8000b3a:	f001 fae8 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d_GPIO_Port, Led_d_Pin, RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2110      	movs	r1, #16
 8000b42:	488a      	ldr	r0, [pc, #552]	; (8000d6c <display7SEG+0x31c>)
 8000b44:	f001 fae3 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e_GPIO_Port, Led_e_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	4887      	ldr	r0, [pc, #540]	; (8000d6c <display7SEG+0x31c>)
 8000b4e:	f001 fade 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f_GPIO_Port, Led_f_Pin, SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	4885      	ldr	r0, [pc, #532]	; (8000d6c <display7SEG+0x31c>)
 8000b58:	f001 fad9 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g_GPIO_Port, Led_g_Pin, RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2180      	movs	r1, #128	; 0x80
 8000b60:	4882      	ldr	r0, [pc, #520]	; (8000d6c <display7SEG+0x31c>)
 8000b62:	f001 fad4 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000b66:	e0fc      	b.n	8000d62 <display7SEG+0x312>
	case 3:
		  HAL_GPIO_WritePin(Led_a_GPIO_Port, Led_a_Pin, RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	487f      	ldr	r0, [pc, #508]	; (8000d6c <display7SEG+0x31c>)
 8000b6e:	f001 face 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b_GPIO_Port, Led_b_Pin, RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2104      	movs	r1, #4
 8000b76:	487d      	ldr	r0, [pc, #500]	; (8000d6c <display7SEG+0x31c>)
 8000b78:	f001 fac9 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c_GPIO_Port, Led_c_Pin, RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2108      	movs	r1, #8
 8000b80:	487a      	ldr	r0, [pc, #488]	; (8000d6c <display7SEG+0x31c>)
 8000b82:	f001 fac4 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d_GPIO_Port, Led_d_Pin, RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4878      	ldr	r0, [pc, #480]	; (8000d6c <display7SEG+0x31c>)
 8000b8c:	f001 fabf 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e_GPIO_Port, Led_e_Pin, SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2120      	movs	r1, #32
 8000b94:	4875      	ldr	r0, [pc, #468]	; (8000d6c <display7SEG+0x31c>)
 8000b96:	f001 faba 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f_GPIO_Port, Led_f_Pin, SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2140      	movs	r1, #64	; 0x40
 8000b9e:	4873      	ldr	r0, [pc, #460]	; (8000d6c <display7SEG+0x31c>)
 8000ba0:	f001 fab5 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g_GPIO_Port, Led_g_Pin, RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2180      	movs	r1, #128	; 0x80
 8000ba8:	4870      	ldr	r0, [pc, #448]	; (8000d6c <display7SEG+0x31c>)
 8000baa:	f001 fab0 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000bae:	e0d8      	b.n	8000d62 <display7SEG+0x312>
	case 4:
		  HAL_GPIO_WritePin(Led_a_GPIO_Port, Led_a_Pin, SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	486d      	ldr	r0, [pc, #436]	; (8000d6c <display7SEG+0x31c>)
 8000bb6:	f001 faaa 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b_GPIO_Port, Led_b_Pin, RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	486b      	ldr	r0, [pc, #428]	; (8000d6c <display7SEG+0x31c>)
 8000bc0:	f001 faa5 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c_GPIO_Port, Led_c_Pin, RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2108      	movs	r1, #8
 8000bc8:	4868      	ldr	r0, [pc, #416]	; (8000d6c <display7SEG+0x31c>)
 8000bca:	f001 faa0 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d_GPIO_Port, Led_d_Pin, SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	4866      	ldr	r0, [pc, #408]	; (8000d6c <display7SEG+0x31c>)
 8000bd4:	f001 fa9b 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e_GPIO_Port, Led_e_Pin, SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2120      	movs	r1, #32
 8000bdc:	4863      	ldr	r0, [pc, #396]	; (8000d6c <display7SEG+0x31c>)
 8000bde:	f001 fa96 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f_GPIO_Port, Led_f_Pin, RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2140      	movs	r1, #64	; 0x40
 8000be6:	4861      	ldr	r0, [pc, #388]	; (8000d6c <display7SEG+0x31c>)
 8000be8:	f001 fa91 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g_GPIO_Port, Led_g_Pin, RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	485e      	ldr	r0, [pc, #376]	; (8000d6c <display7SEG+0x31c>)
 8000bf2:	f001 fa8c 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000bf6:	e0b4      	b.n	8000d62 <display7SEG+0x312>
	case 5:
		  HAL_GPIO_WritePin(Led_a_GPIO_Port, Led_a_Pin, RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	485b      	ldr	r0, [pc, #364]	; (8000d6c <display7SEG+0x31c>)
 8000bfe:	f001 fa86 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b_GPIO_Port, Led_b_Pin, SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	2104      	movs	r1, #4
 8000c06:	4859      	ldr	r0, [pc, #356]	; (8000d6c <display7SEG+0x31c>)
 8000c08:	f001 fa81 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c_GPIO_Port, Led_c_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2108      	movs	r1, #8
 8000c10:	4856      	ldr	r0, [pc, #344]	; (8000d6c <display7SEG+0x31c>)
 8000c12:	f001 fa7c 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d_GPIO_Port, Led_d_Pin, RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2110      	movs	r1, #16
 8000c1a:	4854      	ldr	r0, [pc, #336]	; (8000d6c <display7SEG+0x31c>)
 8000c1c:	f001 fa77 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e_GPIO_Port, Led_e_Pin, SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2120      	movs	r1, #32
 8000c24:	4851      	ldr	r0, [pc, #324]	; (8000d6c <display7SEG+0x31c>)
 8000c26:	f001 fa72 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f_GPIO_Port, Led_f_Pin, RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2140      	movs	r1, #64	; 0x40
 8000c2e:	484f      	ldr	r0, [pc, #316]	; (8000d6c <display7SEG+0x31c>)
 8000c30:	f001 fa6d 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g_GPIO_Port, Led_g_Pin, RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	484c      	ldr	r0, [pc, #304]	; (8000d6c <display7SEG+0x31c>)
 8000c3a:	f001 fa68 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000c3e:	e090      	b.n	8000d62 <display7SEG+0x312>
	case 6:
		  HAL_GPIO_WritePin(Led_a_GPIO_Port, Led_a_Pin, RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2102      	movs	r1, #2
 8000c44:	4849      	ldr	r0, [pc, #292]	; (8000d6c <display7SEG+0x31c>)
 8000c46:	f001 fa62 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b_GPIO_Port, Led_b_Pin, SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4847      	ldr	r0, [pc, #284]	; (8000d6c <display7SEG+0x31c>)
 8000c50:	f001 fa5d 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c_GPIO_Port, Led_c_Pin, RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2108      	movs	r1, #8
 8000c58:	4844      	ldr	r0, [pc, #272]	; (8000d6c <display7SEG+0x31c>)
 8000c5a:	f001 fa58 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d_GPIO_Port, Led_d_Pin, RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2110      	movs	r1, #16
 8000c62:	4842      	ldr	r0, [pc, #264]	; (8000d6c <display7SEG+0x31c>)
 8000c64:	f001 fa53 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e_GPIO_Port, Led_e_Pin, RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	483f      	ldr	r0, [pc, #252]	; (8000d6c <display7SEG+0x31c>)
 8000c6e:	f001 fa4e 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f_GPIO_Port, Led_f_Pin, RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	483d      	ldr	r0, [pc, #244]	; (8000d6c <display7SEG+0x31c>)
 8000c78:	f001 fa49 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g_GPIO_Port, Led_g_Pin, RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	483a      	ldr	r0, [pc, #232]	; (8000d6c <display7SEG+0x31c>)
 8000c82:	f001 fa44 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000c86:	e06c      	b.n	8000d62 <display7SEG+0x312>
	case 7:
		  HAL_GPIO_WritePin(Led_a_GPIO_Port, Led_a_Pin, RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4837      	ldr	r0, [pc, #220]	; (8000d6c <display7SEG+0x31c>)
 8000c8e:	f001 fa3e 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b_GPIO_Port, Led_b_Pin, RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2104      	movs	r1, #4
 8000c96:	4835      	ldr	r0, [pc, #212]	; (8000d6c <display7SEG+0x31c>)
 8000c98:	f001 fa39 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c_GPIO_Port, Led_c_Pin, RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	4832      	ldr	r0, [pc, #200]	; (8000d6c <display7SEG+0x31c>)
 8000ca2:	f001 fa34 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d_GPIO_Port, Led_d_Pin, SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2110      	movs	r1, #16
 8000caa:	4830      	ldr	r0, [pc, #192]	; (8000d6c <display7SEG+0x31c>)
 8000cac:	f001 fa2f 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e_GPIO_Port, Led_e_Pin, SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	482d      	ldr	r0, [pc, #180]	; (8000d6c <display7SEG+0x31c>)
 8000cb6:	f001 fa2a 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f_GPIO_Port, Led_f_Pin, SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2140      	movs	r1, #64	; 0x40
 8000cbe:	482b      	ldr	r0, [pc, #172]	; (8000d6c <display7SEG+0x31c>)
 8000cc0:	f001 fa25 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g_GPIO_Port, Led_g_Pin, SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	4828      	ldr	r0, [pc, #160]	; (8000d6c <display7SEG+0x31c>)
 8000cca:	f001 fa20 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000cce:	e048      	b.n	8000d62 <display7SEG+0x312>
	case 8:
		  HAL_GPIO_WritePin(Led_a_GPIO_Port, Led_a_Pin, RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	4825      	ldr	r0, [pc, #148]	; (8000d6c <display7SEG+0x31c>)
 8000cd6:	f001 fa1a 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b_GPIO_Port, Led_b_Pin, RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2104      	movs	r1, #4
 8000cde:	4823      	ldr	r0, [pc, #140]	; (8000d6c <display7SEG+0x31c>)
 8000ce0:	f001 fa15 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c_GPIO_Port, Led_c_Pin, RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	4820      	ldr	r0, [pc, #128]	; (8000d6c <display7SEG+0x31c>)
 8000cea:	f001 fa10 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d_GPIO_Port, Led_d_Pin, RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	481e      	ldr	r0, [pc, #120]	; (8000d6c <display7SEG+0x31c>)
 8000cf4:	f001 fa0b 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e_GPIO_Port, Led_e_Pin, RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	481b      	ldr	r0, [pc, #108]	; (8000d6c <display7SEG+0x31c>)
 8000cfe:	f001 fa06 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f_GPIO_Port, Led_f_Pin, RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	; 0x40
 8000d06:	4819      	ldr	r0, [pc, #100]	; (8000d6c <display7SEG+0x31c>)
 8000d08:	f001 fa01 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g_GPIO_Port, Led_g_Pin, RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	4816      	ldr	r0, [pc, #88]	; (8000d6c <display7SEG+0x31c>)
 8000d12:	f001 f9fc 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000d16:	e024      	b.n	8000d62 <display7SEG+0x312>
	case 9:
		  HAL_GPIO_WritePin(Led_a_GPIO_Port, Led_a_Pin, RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	4813      	ldr	r0, [pc, #76]	; (8000d6c <display7SEG+0x31c>)
 8000d1e:	f001 f9f6 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b_GPIO_Port, Led_b_Pin, RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2104      	movs	r1, #4
 8000d26:	4811      	ldr	r0, [pc, #68]	; (8000d6c <display7SEG+0x31c>)
 8000d28:	f001 f9f1 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c_GPIO_Port, Led_c_Pin, RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2108      	movs	r1, #8
 8000d30:	480e      	ldr	r0, [pc, #56]	; (8000d6c <display7SEG+0x31c>)
 8000d32:	f001 f9ec 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d_GPIO_Port, Led_d_Pin, RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2110      	movs	r1, #16
 8000d3a:	480c      	ldr	r0, [pc, #48]	; (8000d6c <display7SEG+0x31c>)
 8000d3c:	f001 f9e7 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e_GPIO_Port, Led_e_Pin, SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2120      	movs	r1, #32
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <display7SEG+0x31c>)
 8000d46:	f001 f9e2 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f_GPIO_Port, Led_f_Pin, RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2140      	movs	r1, #64	; 0x40
 8000d4e:	4807      	ldr	r0, [pc, #28]	; (8000d6c <display7SEG+0x31c>)
 8000d50:	f001 f9dd 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g_GPIO_Port, Led_g_Pin, RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2180      	movs	r1, #128	; 0x80
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <display7SEG+0x31c>)
 8000d5a:	f001 f9d8 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000d5e:	e000      	b.n	8000d62 <display7SEG+0x312>
	default:
		  break;
 8000d60:	bf00      	nop
	}
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40010800 	.word	0x40010800

08000d70 <display7SEG2>:

void display7SEG2(int num){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b09      	cmp	r3, #9
 8000d7c:	f200 81c8 	bhi.w	8001110 <display7SEG2+0x3a0>
 8000d80:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <display7SEG2+0x18>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000db1 	.word	0x08000db1
 8000d8c:	08000e07 	.word	0x08000e07
 8000d90:	08000e5d 	.word	0x08000e5d
 8000d94:	08000eb3 	.word	0x08000eb3
 8000d98:	08000f09 	.word	0x08000f09
 8000d9c:	08000f5f 	.word	0x08000f5f
 8000da0:	08000fb5 	.word	0x08000fb5
 8000da4:	0800100b 	.word	0x0800100b
 8000da8:	08001061 	.word	0x08001061
 8000dac:	080010b7 	.word	0x080010b7
	switch(num){
	case 0:
		  HAL_GPIO_WritePin(Led_a2_GPIO_Port, Led_a2_Pin, RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db6:	48d5      	ldr	r0, [pc, #852]	; (800110c <display7SEG2+0x39c>)
 8000db8:	f001 f9a9 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b2_GPIO_Port, Led_b2_Pin, RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc2:	48d2      	ldr	r0, [pc, #840]	; (800110c <display7SEG2+0x39c>)
 8000dc4:	f001 f9a3 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c2_GPIO_Port, Led_c2_Pin, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dce:	48cf      	ldr	r0, [pc, #828]	; (800110c <display7SEG2+0x39c>)
 8000dd0:	f001 f99d 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d2_GPIO_Port, Led_d2_Pin, RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dda:	48cc      	ldr	r0, [pc, #816]	; (800110c <display7SEG2+0x39c>)
 8000ddc:	f001 f997 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e2_GPIO_Port, Led_e2_Pin, RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de6:	48c9      	ldr	r0, [pc, #804]	; (800110c <display7SEG2+0x39c>)
 8000de8:	f001 f991 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f2_GPIO_Port, Led_f2_Pin, RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df2:	48c6      	ldr	r0, [pc, #792]	; (800110c <display7SEG2+0x39c>)
 8000df4:	f001 f98b 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g2_GPIO_Port, Led_g2_Pin, SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dfe:	48c3      	ldr	r0, [pc, #780]	; (800110c <display7SEG2+0x39c>)
 8000e00:	f001 f985 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000e04:	e185      	b.n	8001112 <display7SEG2+0x3a2>
	case 1:
		  HAL_GPIO_WritePin(Led_a2_GPIO_Port, Led_a2_Pin, SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0c:	48bf      	ldr	r0, [pc, #764]	; (800110c <display7SEG2+0x39c>)
 8000e0e:	f001 f97e 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b2_GPIO_Port, Led_b2_Pin, RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e18:	48bc      	ldr	r0, [pc, #752]	; (800110c <display7SEG2+0x39c>)
 8000e1a:	f001 f978 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c2_GPIO_Port, Led_c2_Pin, RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e24:	48b9      	ldr	r0, [pc, #740]	; (800110c <display7SEG2+0x39c>)
 8000e26:	f001 f972 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d2_GPIO_Port, Led_d2_Pin, SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e30:	48b6      	ldr	r0, [pc, #728]	; (800110c <display7SEG2+0x39c>)
 8000e32:	f001 f96c 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e2_GPIO_Port, Led_e2_Pin, SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3c:	48b3      	ldr	r0, [pc, #716]	; (800110c <display7SEG2+0x39c>)
 8000e3e:	f001 f966 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f2_GPIO_Port, Led_f2_Pin, SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e48:	48b0      	ldr	r0, [pc, #704]	; (800110c <display7SEG2+0x39c>)
 8000e4a:	f001 f960 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g2_GPIO_Port, Led_g2_Pin, SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e54:	48ad      	ldr	r0, [pc, #692]	; (800110c <display7SEG2+0x39c>)
 8000e56:	f001 f95a 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000e5a:	e15a      	b.n	8001112 <display7SEG2+0x3a2>
	case 2:
		  HAL_GPIO_WritePin(Led_a2_GPIO_Port, Led_a2_Pin, RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e62:	48aa      	ldr	r0, [pc, #680]	; (800110c <display7SEG2+0x39c>)
 8000e64:	f001 f953 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b2_GPIO_Port, Led_b2_Pin, RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6e:	48a7      	ldr	r0, [pc, #668]	; (800110c <display7SEG2+0x39c>)
 8000e70:	f001 f94d 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c2_GPIO_Port, Led_c2_Pin, SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7a:	48a4      	ldr	r0, [pc, #656]	; (800110c <display7SEG2+0x39c>)
 8000e7c:	f001 f947 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d2_GPIO_Port, Led_d2_Pin, RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e86:	48a1      	ldr	r0, [pc, #644]	; (800110c <display7SEG2+0x39c>)
 8000e88:	f001 f941 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e2_GPIO_Port, Led_e2_Pin, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e92:	489e      	ldr	r0, [pc, #632]	; (800110c <display7SEG2+0x39c>)
 8000e94:	f001 f93b 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f2_GPIO_Port, Led_f2_Pin, SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9e:	489b      	ldr	r0, [pc, #620]	; (800110c <display7SEG2+0x39c>)
 8000ea0:	f001 f935 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g2_GPIO_Port, Led_g2_Pin, RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eaa:	4898      	ldr	r0, [pc, #608]	; (800110c <display7SEG2+0x39c>)
 8000eac:	f001 f92f 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000eb0:	e12f      	b.n	8001112 <display7SEG2+0x3a2>
	case 3:
		  HAL_GPIO_WritePin(Led_a2_GPIO_Port, Led_a2_Pin, RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb8:	4894      	ldr	r0, [pc, #592]	; (800110c <display7SEG2+0x39c>)
 8000eba:	f001 f928 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b2_GPIO_Port, Led_b2_Pin, RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec4:	4891      	ldr	r0, [pc, #580]	; (800110c <display7SEG2+0x39c>)
 8000ec6:	f001 f922 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c2_GPIO_Port, Led_c2_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed0:	488e      	ldr	r0, [pc, #568]	; (800110c <display7SEG2+0x39c>)
 8000ed2:	f001 f91c 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d2_GPIO_Port, Led_d2_Pin, RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000edc:	488b      	ldr	r0, [pc, #556]	; (800110c <display7SEG2+0x39c>)
 8000ede:	f001 f916 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e2_GPIO_Port, Led_e2_Pin, SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee8:	4888      	ldr	r0, [pc, #544]	; (800110c <display7SEG2+0x39c>)
 8000eea:	f001 f910 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f2_GPIO_Port, Led_f2_Pin, SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef4:	4885      	ldr	r0, [pc, #532]	; (800110c <display7SEG2+0x39c>)
 8000ef6:	f001 f90a 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g2_GPIO_Port, Led_g2_Pin, RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f00:	4882      	ldr	r0, [pc, #520]	; (800110c <display7SEG2+0x39c>)
 8000f02:	f001 f904 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000f06:	e104      	b.n	8001112 <display7SEG2+0x3a2>
	case 4:
		  HAL_GPIO_WritePin(Led_a2_GPIO_Port, Led_a2_Pin, SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0e:	487f      	ldr	r0, [pc, #508]	; (800110c <display7SEG2+0x39c>)
 8000f10:	f001 f8fd 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b2_GPIO_Port, Led_b2_Pin, RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	487c      	ldr	r0, [pc, #496]	; (800110c <display7SEG2+0x39c>)
 8000f1c:	f001 f8f7 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c2_GPIO_Port, Led_c2_Pin, RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f26:	4879      	ldr	r0, [pc, #484]	; (800110c <display7SEG2+0x39c>)
 8000f28:	f001 f8f1 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d2_GPIO_Port, Led_d2_Pin, SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f32:	4876      	ldr	r0, [pc, #472]	; (800110c <display7SEG2+0x39c>)
 8000f34:	f001 f8eb 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e2_GPIO_Port, Led_e2_Pin, SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3e:	4873      	ldr	r0, [pc, #460]	; (800110c <display7SEG2+0x39c>)
 8000f40:	f001 f8e5 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f2_GPIO_Port, Led_f2_Pin, RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4a:	4870      	ldr	r0, [pc, #448]	; (800110c <display7SEG2+0x39c>)
 8000f4c:	f001 f8df 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g2_GPIO_Port, Led_g2_Pin, RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f56:	486d      	ldr	r0, [pc, #436]	; (800110c <display7SEG2+0x39c>)
 8000f58:	f001 f8d9 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000f5c:	e0d9      	b.n	8001112 <display7SEG2+0x3a2>
	case 5:
		  HAL_GPIO_WritePin(Led_a2_GPIO_Port, Led_a2_Pin, RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	4869      	ldr	r0, [pc, #420]	; (800110c <display7SEG2+0x39c>)
 8000f66:	f001 f8d2 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b2_GPIO_Port, Led_b2_Pin, SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f70:	4866      	ldr	r0, [pc, #408]	; (800110c <display7SEG2+0x39c>)
 8000f72:	f001 f8cc 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c2_GPIO_Port, Led_c2_Pin, RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7c:	4863      	ldr	r0, [pc, #396]	; (800110c <display7SEG2+0x39c>)
 8000f7e:	f001 f8c6 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d2_GPIO_Port, Led_d2_Pin, RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f88:	4860      	ldr	r0, [pc, #384]	; (800110c <display7SEG2+0x39c>)
 8000f8a:	f001 f8c0 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e2_GPIO_Port, Led_e2_Pin, SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f94:	485d      	ldr	r0, [pc, #372]	; (800110c <display7SEG2+0x39c>)
 8000f96:	f001 f8ba 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f2_GPIO_Port, Led_f2_Pin, RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa0:	485a      	ldr	r0, [pc, #360]	; (800110c <display7SEG2+0x39c>)
 8000fa2:	f001 f8b4 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g2_GPIO_Port, Led_g2_Pin, RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fac:	4857      	ldr	r0, [pc, #348]	; (800110c <display7SEG2+0x39c>)
 8000fae:	f001 f8ae 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8000fb2:	e0ae      	b.n	8001112 <display7SEG2+0x3a2>
	case 6:
		  HAL_GPIO_WritePin(Led_a2_GPIO_Port, Led_a2_Pin, RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fba:	4854      	ldr	r0, [pc, #336]	; (800110c <display7SEG2+0x39c>)
 8000fbc:	f001 f8a7 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b2_GPIO_Port, Led_b2_Pin, SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc6:	4851      	ldr	r0, [pc, #324]	; (800110c <display7SEG2+0x39c>)
 8000fc8:	f001 f8a1 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c2_GPIO_Port, Led_c2_Pin, RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd2:	484e      	ldr	r0, [pc, #312]	; (800110c <display7SEG2+0x39c>)
 8000fd4:	f001 f89b 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d2_GPIO_Port, Led_d2_Pin, RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fde:	484b      	ldr	r0, [pc, #300]	; (800110c <display7SEG2+0x39c>)
 8000fe0:	f001 f895 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e2_GPIO_Port, Led_e2_Pin, RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	4848      	ldr	r0, [pc, #288]	; (800110c <display7SEG2+0x39c>)
 8000fec:	f001 f88f 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f2_GPIO_Port, Led_f2_Pin, RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff6:	4845      	ldr	r0, [pc, #276]	; (800110c <display7SEG2+0x39c>)
 8000ff8:	f001 f889 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g2_GPIO_Port, Led_g2_Pin, RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001002:	4842      	ldr	r0, [pc, #264]	; (800110c <display7SEG2+0x39c>)
 8001004:	f001 f883 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 8001008:	e083      	b.n	8001112 <display7SEG2+0x3a2>
	case 7:
		  HAL_GPIO_WritePin(Led_a2_GPIO_Port, Led_a2_Pin, RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001010:	483e      	ldr	r0, [pc, #248]	; (800110c <display7SEG2+0x39c>)
 8001012:	f001 f87c 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b2_GPIO_Port, Led_b2_Pin, RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101c:	483b      	ldr	r0, [pc, #236]	; (800110c <display7SEG2+0x39c>)
 800101e:	f001 f876 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c2_GPIO_Port, Led_c2_Pin, RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001028:	4838      	ldr	r0, [pc, #224]	; (800110c <display7SEG2+0x39c>)
 800102a:	f001 f870 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d2_GPIO_Port, Led_d2_Pin, SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001034:	4835      	ldr	r0, [pc, #212]	; (800110c <display7SEG2+0x39c>)
 8001036:	f001 f86a 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e2_GPIO_Port, Led_e2_Pin, SET);
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001040:	4832      	ldr	r0, [pc, #200]	; (800110c <display7SEG2+0x39c>)
 8001042:	f001 f864 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f2_GPIO_Port, Led_f2_Pin, SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800104c:	482f      	ldr	r0, [pc, #188]	; (800110c <display7SEG2+0x39c>)
 800104e:	f001 f85e 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g2_GPIO_Port, Led_g2_Pin, SET);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001058:	482c      	ldr	r0, [pc, #176]	; (800110c <display7SEG2+0x39c>)
 800105a:	f001 f858 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 800105e:	e058      	b.n	8001112 <display7SEG2+0x3a2>
	case 8:
		  HAL_GPIO_WritePin(Led_a2_GPIO_Port, Led_a2_Pin, RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001066:	4829      	ldr	r0, [pc, #164]	; (800110c <display7SEG2+0x39c>)
 8001068:	f001 f851 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b2_GPIO_Port, Led_b2_Pin, RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001072:	4826      	ldr	r0, [pc, #152]	; (800110c <display7SEG2+0x39c>)
 8001074:	f001 f84b 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c2_GPIO_Port, Led_c2_Pin, RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107e:	4823      	ldr	r0, [pc, #140]	; (800110c <display7SEG2+0x39c>)
 8001080:	f001 f845 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d2_GPIO_Port, Led_d2_Pin, RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108a:	4820      	ldr	r0, [pc, #128]	; (800110c <display7SEG2+0x39c>)
 800108c:	f001 f83f 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e2_GPIO_Port, Led_e2_Pin, RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001096:	481d      	ldr	r0, [pc, #116]	; (800110c <display7SEG2+0x39c>)
 8001098:	f001 f839 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f2_GPIO_Port, Led_f2_Pin, RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010a2:	481a      	ldr	r0, [pc, #104]	; (800110c <display7SEG2+0x39c>)
 80010a4:	f001 f833 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g2_GPIO_Port, Led_g2_Pin, RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	4817      	ldr	r0, [pc, #92]	; (800110c <display7SEG2+0x39c>)
 80010b0:	f001 f82d 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 80010b4:	e02d      	b.n	8001112 <display7SEG2+0x3a2>
	case 9:
		  HAL_GPIO_WritePin(Led_a2_GPIO_Port, Led_a2_Pin, RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010bc:	4813      	ldr	r0, [pc, #76]	; (800110c <display7SEG2+0x39c>)
 80010be:	f001 f826 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_b2_GPIO_Port, Led_b2_Pin, RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c8:	4810      	ldr	r0, [pc, #64]	; (800110c <display7SEG2+0x39c>)
 80010ca:	f001 f820 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_c2_GPIO_Port, Led_c2_Pin, RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <display7SEG2+0x39c>)
 80010d6:	f001 f81a 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_d2_GPIO_Port, Led_d2_Pin, RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e0:	480a      	ldr	r0, [pc, #40]	; (800110c <display7SEG2+0x39c>)
 80010e2:	f001 f814 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_e2_GPIO_Port, Led_e2_Pin, SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <display7SEG2+0x39c>)
 80010ee:	f001 f80e 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_f2_GPIO_Port, Led_f2_Pin, RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <display7SEG2+0x39c>)
 80010fa:	f001 f808 	bl	800210e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Led_g2_GPIO_Port, Led_g2_Pin, RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001104:	4801      	ldr	r0, [pc, #4]	; (800110c <display7SEG2+0x39c>)
 8001106:	f001 f802 	bl	800210e <HAL_GPIO_WritePin>
		  break;
 800110a:	e002      	b.n	8001112 <display7SEG2+0x3a2>
 800110c:	40010800 	.word	0x40010800
	default:
		  break;
 8001110:	bf00      	nop
	}
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop

0800111c <update7SEG>:

void update7SEG(int index){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
		switch(index){
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <update7SEG+0x16>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d012      	beq.n	8001156 <update7SEG+0x3a>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
			display7SEG(led_buffer[index]);
			break;
		default:
			break;
 8001130:	e023      	b.n	800117a <update7SEG+0x5e>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2108      	movs	r1, #8
 8001136:	4813      	ldr	r0, [pc, #76]	; (8001184 <update7SEG+0x68>)
 8001138:	f000 ffe9 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800113c:	2201      	movs	r2, #1
 800113e:	2110      	movs	r1, #16
 8001140:	4810      	ldr	r0, [pc, #64]	; (8001184 <update7SEG+0x68>)
 8001142:	f000 ffe4 	bl	800210e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <update7SEG+0x6c>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fc7e 	bl	8000a50 <display7SEG>
			break;
 8001154:	e011      	b.n	800117a <update7SEG+0x5e>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2108      	movs	r1, #8
 800115a:	480a      	ldr	r0, [pc, #40]	; (8001184 <update7SEG+0x68>)
 800115c:	f000 ffd7 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2110      	movs	r1, #16
 8001164:	4807      	ldr	r0, [pc, #28]	; (8001184 <update7SEG+0x68>)
 8001166:	f000 ffd2 	bl	800210e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 800116a:	4a07      	ldr	r2, [pc, #28]	; (8001188 <update7SEG+0x6c>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fc6c 	bl	8000a50 <display7SEG>
			break;
 8001178:	bf00      	nop
		}
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40010c00 	.word	0x40010c00
 8001188:	20000048 	.word	0x20000048

0800118c <update7SEG2>:

void update7SEG2(int index){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	switch(index){
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <update7SEG2+0x16>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d012      	beq.n	80011c6 <update7SEG2+0x3a>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
				display7SEG2(led_buffer2[index]);
				break;
	default:
		break;
 80011a0:	e023      	b.n	80011ea <update7SEG2+0x5e>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2120      	movs	r1, #32
 80011a6:	4813      	ldr	r0, [pc, #76]	; (80011f4 <update7SEG2+0x68>)
 80011a8:	f000 ffb1 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2140      	movs	r1, #64	; 0x40
 80011b0:	4810      	ldr	r0, [pc, #64]	; (80011f4 <update7SEG2+0x68>)
 80011b2:	f000 ffac 	bl	800210e <HAL_GPIO_WritePin>
				display7SEG2(led_buffer2[index]);
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <update7SEG2+0x6c>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fdd6 	bl	8000d70 <display7SEG2>
				break;
 80011c4:	e011      	b.n	80011ea <update7SEG2+0x5e>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2120      	movs	r1, #32
 80011ca:	480a      	ldr	r0, [pc, #40]	; (80011f4 <update7SEG2+0x68>)
 80011cc:	f000 ff9f 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2140      	movs	r1, #64	; 0x40
 80011d4:	4807      	ldr	r0, [pc, #28]	; (80011f4 <update7SEG2+0x68>)
 80011d6:	f000 ff9a 	bl	800210e <HAL_GPIO_WritePin>
				display7SEG2(led_buffer2[index]);
 80011da:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <update7SEG2+0x6c>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fdc4 	bl	8000d70 <display7SEG2>
				break;
 80011e8:	bf00      	nop
	}
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40010c00 	.word	0x40010c00
 80011f8:	20000050 	.word	0x20000050

080011fc <updateBuffer1>:


void updateBuffer1(int value){
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	led_buffer[0] = value / 10;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a0d      	ldr	r2, [pc, #52]	; (800123c <updateBuffer1+0x40>)
 8001208:	fb82 1203 	smull	r1, r2, r2, r3
 800120c:	1092      	asrs	r2, r2, #2
 800120e:	17db      	asrs	r3, r3, #31
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <updateBuffer1+0x44>)
 8001214:	6013      	str	r3, [r2, #0]
	led_buffer[1] = value % 10;
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <updateBuffer1+0x40>)
 800121a:	fb83 2301 	smull	r2, r3, r3, r1
 800121e:	109a      	asrs	r2, r3, #2
 8001220:	17cb      	asrs	r3, r1, #31
 8001222:	1ad2      	subs	r2, r2, r3
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	1aca      	subs	r2, r1, r3
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <updateBuffer1+0x44>)
 8001230:	605a      	str	r2, [r3, #4]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	66666667 	.word	0x66666667
 8001240:	20000048 	.word	0x20000048

08001244 <updateBuffer2>:

void updateBuffer2(int value){
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	led_buffer2[0] = value / 10;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <updateBuffer2+0x40>)
 8001250:	fb82 1203 	smull	r1, r2, r2, r3
 8001254:	1092      	asrs	r2, r2, #2
 8001256:	17db      	asrs	r3, r3, #31
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <updateBuffer2+0x44>)
 800125c:	6013      	str	r3, [r2, #0]
	led_buffer2[1] = value % 10;
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <updateBuffer2+0x40>)
 8001262:	fb83 2301 	smull	r2, r3, r3, r1
 8001266:	109a      	asrs	r2, r3, #2
 8001268:	17cb      	asrs	r3, r1, #31
 800126a:	1ad2      	subs	r2, r2, r3
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	1aca      	subs	r2, r1, r3
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <updateBuffer2+0x44>)
 8001278:	605a      	str	r2, [r3, #4]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	66666667 	.word	0x66666667
 8001288:	20000050 	.word	0x20000050

0800128c <clear_leds>:

void clear_leds(){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001296:	4811      	ldr	r0, [pc, #68]	; (80012dc <clear_leds+0x50>)
 8001298:	f000 ff39 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800129c:	2201      	movs	r2, #1
 800129e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <clear_leds+0x50>)
 80012a4:	f000 ff33 	bl	800210e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ae:	480b      	ldr	r0, [pc, #44]	; (80012dc <clear_leds+0x50>)
 80012b0:	f000 ff2d 	bl	800210e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ba:	4808      	ldr	r0, [pc, #32]	; (80012dc <clear_leds+0x50>)
 80012bc:	f000 ff27 	bl	800210e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <clear_leds+0x50>)
 80012c8:	f000 ff21 	bl	800210e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d2:	4802      	ldr	r0, [pc, #8]	; (80012dc <clear_leds+0x50>)
 80012d4:	f000 ff1b 	bl	800210e <HAL_GPIO_WritePin>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40010c00 	.word	0x40010c00

080012e0 <led_on>:

void led_on(int status){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b0c      	subs	r3, #12
 80012ec:	2b13      	cmp	r3, #19
 80012ee:	f200 80bf 	bhi.w	8001470 <led_on+0x190>
 80012f2:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <led_on+0x18>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	08001393 	.word	0x08001393
 80012fc:	08001349 	.word	0x08001349
 8001300:	08001471 	.word	0x08001471
 8001304:	08001471 	.word	0x08001471
 8001308:	08001471 	.word	0x08001471
 800130c:	08001471 	.word	0x08001471
 8001310:	08001471 	.word	0x08001471
 8001314:	08001471 	.word	0x08001471
 8001318:	08001471 	.word	0x08001471
 800131c:	080013dd 	.word	0x080013dd
 8001320:	08001471 	.word	0x08001471
 8001324:	08001471 	.word	0x08001471
 8001328:	08001471 	.word	0x08001471
 800132c:	08001471 	.word	0x08001471
 8001330:	08001471 	.word	0x08001471
 8001334:	08001471 	.word	0x08001471
 8001338:	08001471 	.word	0x08001471
 800133c:	08001471 	.word	0x08001471
 8001340:	08001471 	.word	0x08001471
 8001344:	08001427 	.word	0x08001427
	switch(status){
	case RED_GREEN:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800134e:	484b      	ldr	r0, [pc, #300]	; (800147c <led_on+0x19c>)
 8001350:	f000 fedd 	bl	800210e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8001354:	2201      	movs	r2, #1
 8001356:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800135a:	4848      	ldr	r0, [pc, #288]	; (800147c <led_on+0x19c>)
 800135c:	f000 fed7 	bl	800210e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001366:	4845      	ldr	r0, [pc, #276]	; (800147c <led_on+0x19c>)
 8001368:	f000 fed1 	bl	800210e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800136c:	2201      	movs	r2, #1
 800136e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001372:	4842      	ldr	r0, [pc, #264]	; (800147c <led_on+0x19c>)
 8001374:	f000 fecb 	bl	800210e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137e:	483f      	ldr	r0, [pc, #252]	; (800147c <led_on+0x19c>)
 8001380:	f000 fec5 	bl	800210e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138a:	483c      	ldr	r0, [pc, #240]	; (800147c <led_on+0x19c>)
 800138c:	f000 febf 	bl	800210e <HAL_GPIO_WritePin>
		break;
 8001390:	e06f      	b.n	8001472 <led_on+0x192>
	case RED_YELLOW:

				HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001398:	4838      	ldr	r0, [pc, #224]	; (800147c <led_on+0x19c>)
 800139a:	f000 feb8 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a4:	4835      	ldr	r0, [pc, #212]	; (800147c <led_on+0x19c>)
 80013a6:	f000 feb2 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b0:	4832      	ldr	r0, [pc, #200]	; (800147c <led_on+0x19c>)
 80013b2:	f000 feac 	bl	800210e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013bc:	482f      	ldr	r0, [pc, #188]	; (800147c <led_on+0x19c>)
 80013be:	f000 fea6 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c8:	482c      	ldr	r0, [pc, #176]	; (800147c <led_on+0x19c>)
 80013ca:	f000 fea0 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d4:	4829      	ldr	r0, [pc, #164]	; (800147c <led_on+0x19c>)
 80013d6:	f000 fe9a 	bl	800210e <HAL_GPIO_WritePin>
		break;
 80013da:	e04a      	b.n	8001472 <led_on+0x192>
	case YELLOW_RED:
				HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013e2:	4826      	ldr	r0, [pc, #152]	; (800147c <led_on+0x19c>)
 80013e4:	f000 fe93 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ee:	4823      	ldr	r0, [pc, #140]	; (800147c <led_on+0x19c>)
 80013f0:	f000 fe8d 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fa:	4820      	ldr	r0, [pc, #128]	; (800147c <led_on+0x19c>)
 80013fc:	f000 fe87 	bl	800210e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001406:	481d      	ldr	r0, [pc, #116]	; (800147c <led_on+0x19c>)
 8001408:	f000 fe81 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001412:	481a      	ldr	r0, [pc, #104]	; (800147c <led_on+0x19c>)
 8001414:	f000 fe7b 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800141e:	4817      	ldr	r0, [pc, #92]	; (800147c <led_on+0x19c>)
 8001420:	f000 fe75 	bl	800210e <HAL_GPIO_WritePin>
		break;
 8001424:	e025      	b.n	8001472 <led_on+0x192>
	case GREEN_RED:
				HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8001426:	2201      	movs	r2, #1
 8001428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <led_on+0x19c>)
 800142e:	f000 fe6e 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001438:	4810      	ldr	r0, [pc, #64]	; (800147c <led_on+0x19c>)
 800143a:	f000 fe68 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001444:	480d      	ldr	r0, [pc, #52]	; (800147c <led_on+0x19c>)
 8001446:	f000 fe62 	bl	800210e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001450:	480a      	ldr	r0, [pc, #40]	; (800147c <led_on+0x19c>)
 8001452:	f000 fe5c 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145c:	4807      	ldr	r0, [pc, #28]	; (800147c <led_on+0x19c>)
 800145e:	f000 fe56 	bl	800210e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <led_on+0x19c>)
 800146a:	f000 fe50 	bl	800210e <HAL_GPIO_WritePin>
		break;
 800146e:	e000      	b.n	8001472 <led_on+0x192>
	default:
		break;
 8001470:	bf00      	nop
	}
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40010c00 	.word	0x40010c00

08001480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001486:	f000 fb41 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148a:	f000 f839 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800148e:	f000 f8bf 	bl	8001610 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001492:	f000 f871 	bl	8001578 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001496:	4818      	ldr	r0, [pc, #96]	; (80014f8 <main+0x78>)
 8001498:	f001 fa96 	bl	80029c8 <HAL_TIM_Base_Start_IT>
  setTimer1(10);
 800149c:	200a      	movs	r0, #10
 800149e:	f000 f92b 	bl	80016f8 <setTimer1>
  setTimer2(10);
 80014a2:	200a      	movs	r0, #10
 80014a4:	f000 f944 	bl	8001730 <setTimer2>
  setTimer3(10);
 80014a8:	200a      	movs	r0, #10
 80014aa:	f000 f95d 	bl	8001768 <setTimer3>
  setTimer4(10);
 80014ae:	200a      	movs	r0, #10
 80014b0:	f000 f976 	bl	80017a0 <setTimer4>
  setTimer5(10);
 80014b4:	200a      	movs	r0, #10
 80014b6:	f000 f98f 	bl	80017d8 <setTimer5>
  setTimer6(10);
 80014ba:	200a      	movs	r0, #10
 80014bc:	f000 f9a8 	bl	8001810 <setTimer6>
  setTimer7(10);
 80014c0:	200a      	movs	r0, #10
 80014c2:	f000 f9c1 	bl	8001848 <setTimer7>
  int index = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  fsm();
 80014ca:	f7fe ff75 	bl	80003b8 <fsm>
	  	  fsm_manual_run();
 80014ce:	f7ff f9ab 	bl	8000828 <fsm_manual_run>
	  	  if(timer7_flag == 1){
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <main+0x7c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d1f7      	bne.n	80014ca <main+0x4a>
	  		  update7SEG(index);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fe1e 	bl	800111c <update7SEG>
	  		  update7SEG2(index);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff fe53 	bl	800118c <update7SEG2>
	  		  index = 1 - index;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f1c3 0301 	rsb	r3, r3, #1
 80014ec:	607b      	str	r3, [r7, #4]
	  		  setTimer7(500);
 80014ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f2:	f000 f9a9 	bl	8001848 <setTimer7>
	  	  fsm();
 80014f6:	e7e8      	b.n	80014ca <main+0x4a>
 80014f8:	200000d4 	.word	0x200000d4
 80014fc:	200000d0 	.word	0x200000d0

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b090      	sub	sp, #64	; 0x40
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0318 	add.w	r3, r7, #24
 800150a:	2228      	movs	r2, #40	; 0x28
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fe16 	bl	8003140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001522:	2302      	movs	r3, #2
 8001524:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001526:	2301      	movs	r3, #1
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800152a:	2310      	movs	r3, #16
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800152e:	2300      	movs	r3, #0
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001532:	f107 0318 	add.w	r3, r7, #24
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fe1a 	bl	8002170 <HAL_RCC_OscConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001542:	f000 f8d3 	bl	80016ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001546:	230f      	movs	r3, #15
 8001548:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f001 f886 	bl	8002670 <HAL_RCC_ClockConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800156a:	f000 f8bf 	bl	80016ec <Error_Handler>
  }
}
 800156e:	bf00      	nop
 8001570:	3740      	adds	r7, #64	; 0x40
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	463b      	mov	r3, r7
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_TIM2_Init+0x94>)
 8001596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_TIM2_Init+0x94>)
 800159e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_TIM2_Init+0x94>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_TIM2_Init+0x94>)
 80015ac:	220a      	movs	r2, #10
 80015ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <MX_TIM2_Init+0x94>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_TIM2_Init+0x94>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015bc:	4813      	ldr	r0, [pc, #76]	; (800160c <MX_TIM2_Init+0x94>)
 80015be:	f001 f9b3 	bl	8002928 <HAL_TIM_Base_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015c8:	f000 f890 	bl	80016ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	4619      	mov	r1, r3
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <MX_TIM2_Init+0x94>)
 80015da:	f001 fb49 	bl	8002c70 <HAL_TIM_ConfigClockSource>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015e4:	f000 f882 	bl	80016ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_TIM2_Init+0x94>)
 80015f6:	f001 fd15 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001600:	f000 f874 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200000d4 	.word	0x200000d4

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <MX_GPIO_Init+0xb8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <MX_GPIO_Init+0xb8>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <MX_GPIO_Init+0xb8>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <MX_GPIO_Init+0xb8>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <MX_GPIO_Init+0xb8>)
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <MX_GPIO_Init+0xb8>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_a_Pin|Led_b_Pin|Led_c_Pin|Led_d_Pin
 8001654:	2200      	movs	r2, #0
 8001656:	f64f 61fe 	movw	r1, #65278	; 0xfefe
 800165a:	481c      	ldr	r0, [pc, #112]	; (80016cc <MX_GPIO_Init+0xbc>)
 800165c:	f000 fd57 	bl	800210e <HAL_GPIO_WritePin>
                          |Led_e_Pin|Led_f_Pin|Led_g_Pin|Led_a2_Pin
                          |Led_b2_Pin|Led_c2_Pin|Led_d2_Pin|Led_e2_Pin
                          |Led_f2_Pin|Led_g2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8001660:	2200      	movs	r2, #0
 8001662:	f64f 4178 	movw	r1, #64632	; 0xfc78
 8001666:	481a      	ldr	r0, [pc, #104]	; (80016d0 <MX_GPIO_Init+0xc0>)
 8001668:	f000 fd51 	bl	800210e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Led_a_Pin Led_b_Pin Led_c_Pin Led_d_Pin
                           Led_e_Pin Led_f_Pin Led_g_Pin Led_a2_Pin
                           Led_b2_Pin Led_c2_Pin Led_d2_Pin Led_e2_Pin
                           Led_f2_Pin Led_g2_Pin */
  GPIO_InitStruct.Pin = Led_a_Pin|Led_b_Pin|Led_c_Pin|Led_d_Pin
 800166c:	f64f 63fe 	movw	r3, #65278	; 0xfefe
 8001670:	60bb      	str	r3, [r7, #8]
                          |Led_e_Pin|Led_f_Pin|Led_g_Pin|Led_a2_Pin
                          |Led_b2_Pin|Led_c2_Pin|Led_d2_Pin|Led_e2_Pin
                          |Led_f2_Pin|Led_g2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2302      	movs	r3, #2
 800167c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0308 	add.w	r3, r7, #8
 8001682:	4619      	mov	r1, r3
 8001684:	4811      	ldr	r0, [pc, #68]	; (80016cc <MX_GPIO_Init+0xbc>)
 8001686:	f000 fbb1 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 800168a:	2307      	movs	r3, #7
 800168c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001692:	2301      	movs	r3, #1
 8001694:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4619      	mov	r1, r3
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <MX_GPIO_Init+0xc0>)
 800169e:	f000 fba5 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 80016a2:	f64f 4378 	movw	r3, #64632	; 0xfc78
 80016a6:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2302      	movs	r3, #2
 80016b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 0308 	add.w	r3, r7, #8
 80016b8:	4619      	mov	r1, r3
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_GPIO_Init+0xc0>)
 80016bc:	f000 fb96 	bl	8001dec <HAL_GPIO_Init>

}
 80016c0:	bf00      	nop
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010800 	.word	0x40010800
 80016d0:	40010c00 	.word	0x40010c00

080016d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	timerRun();
 80016dc:	f000 f8d0 	bl	8001880 <timerRun>
	getKeyInput();
 80016e0:	f7fe fd8e 	bl	8000200 <getKeyInput>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
}
 80016f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <Error_Handler+0x8>
	...

080016f8 <setTimer1>:
int timer6_counter = 0;
int timer6_flag = 0;
int timer7_counter = 0;
int timer7_flag = 0;

void setTimer1(int duration){
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <setTimer1+0x2c>)
 8001704:	fb82 1203 	smull	r1, r2, r2, r3
 8001708:	1092      	asrs	r2, r2, #2
 800170a:	17db      	asrs	r3, r3, #31
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	4a06      	ldr	r2, [pc, #24]	; (8001728 <setTimer1+0x30>)
 8001710:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <setTimer1+0x34>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	66666667 	.word	0x66666667
 8001728:	2000009c 	.word	0x2000009c
 800172c:	200000a0 	.word	0x200000a0

08001730 <setTimer2>:



void setTimer2(int duration){
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <setTimer2+0x2c>)
 800173c:	fb82 1203 	smull	r1, r2, r2, r3
 8001740:	1092      	asrs	r2, r2, #2
 8001742:	17db      	asrs	r3, r3, #31
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	4a06      	ldr	r2, [pc, #24]	; (8001760 <setTimer2+0x30>)
 8001748:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <setTimer2+0x34>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	66666667 	.word	0x66666667
 8001760:	200000a4 	.word	0x200000a4
 8001764:	200000a8 	.word	0x200000a8

08001768 <setTimer3>:

void setTimer3(int duration){
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <setTimer3+0x2c>)
 8001774:	fb82 1203 	smull	r1, r2, r2, r3
 8001778:	1092      	asrs	r2, r2, #2
 800177a:	17db      	asrs	r3, r3, #31
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	4a06      	ldr	r2, [pc, #24]	; (8001798 <setTimer3+0x30>)
 8001780:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <setTimer3+0x34>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	66666667 	.word	0x66666667
 8001798:	200000ac 	.word	0x200000ac
 800179c:	200000b0 	.word	0x200000b0

080017a0 <setTimer4>:

void setTimer4(int duration){
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <setTimer4+0x2c>)
 80017ac:	fb82 1203 	smull	r1, r2, r2, r3
 80017b0:	1092      	asrs	r2, r2, #2
 80017b2:	17db      	asrs	r3, r3, #31
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <setTimer4+0x30>)
 80017b8:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <setTimer4+0x34>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	66666667 	.word	0x66666667
 80017d0:	200000b4 	.word	0x200000b4
 80017d4:	200000b8 	.word	0x200000b8

080017d8 <setTimer5>:

void setTimer5(int duration){
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TIMER_CYCLE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a08      	ldr	r2, [pc, #32]	; (8001804 <setTimer5+0x2c>)
 80017e4:	fb82 1203 	smull	r1, r2, r2, r3
 80017e8:	1092      	asrs	r2, r2, #2
 80017ea:	17db      	asrs	r3, r3, #31
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <setTimer5+0x30>)
 80017f0:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <setTimer5+0x34>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	66666667 	.word	0x66666667
 8001808:	200000bc 	.word	0x200000bc
 800180c:	200000c0 	.word	0x200000c0

08001810 <setTimer6>:

void setTimer6(int duration){
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TIMER_CYCLE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <setTimer6+0x2c>)
 800181c:	fb82 1203 	smull	r1, r2, r2, r3
 8001820:	1092      	asrs	r2, r2, #2
 8001822:	17db      	asrs	r3, r3, #31
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	4a06      	ldr	r2, [pc, #24]	; (8001840 <setTimer6+0x30>)
 8001828:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <setTimer6+0x34>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	66666667 	.word	0x66666667
 8001840:	200000c4 	.word	0x200000c4
 8001844:	200000c8 	.word	0x200000c8

08001848 <setTimer7>:
void setTimer7(int duration){
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	timer7_counter = duration / TIMER_CYCLE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <setTimer7+0x2c>)
 8001854:	fb82 1203 	smull	r1, r2, r2, r3
 8001858:	1092      	asrs	r2, r2, #2
 800185a:	17db      	asrs	r3, r3, #31
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	4a06      	ldr	r2, [pc, #24]	; (8001878 <setTimer7+0x30>)
 8001860:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <setTimer7+0x34>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	66666667 	.word	0x66666667
 8001878:	200000cc 	.word	0x200000cc
 800187c:	200000d0 	.word	0x200000d0

08001880 <timerRun>:


void timerRun(){
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001884:	4b39      	ldr	r3, [pc, #228]	; (800196c <timerRun+0xec>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	dd0b      	ble.n	80018a4 <timerRun+0x24>
		timer1_counter--;
 800188c:	4b37      	ldr	r3, [pc, #220]	; (800196c <timerRun+0xec>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	3b01      	subs	r3, #1
 8001892:	4a36      	ldr	r2, [pc, #216]	; (800196c <timerRun+0xec>)
 8001894:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001896:	4b35      	ldr	r3, [pc, #212]	; (800196c <timerRun+0xec>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dc02      	bgt.n	80018a4 <timerRun+0x24>
			timer1_flag = 1;
 800189e:	4b34      	ldr	r3, [pc, #208]	; (8001970 <timerRun+0xf0>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80018a4:	4b33      	ldr	r3, [pc, #204]	; (8001974 <timerRun+0xf4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	dd0b      	ble.n	80018c4 <timerRun+0x44>
		timer2_counter--;
 80018ac:	4b31      	ldr	r3, [pc, #196]	; (8001974 <timerRun+0xf4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4a30      	ldr	r2, [pc, #192]	; (8001974 <timerRun+0xf4>)
 80018b4:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <timerRun+0xf4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	dc02      	bgt.n	80018c4 <timerRun+0x44>
			timer2_flag = 1;
 80018be:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <timerRun+0xf8>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <timerRun+0xfc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	dd0b      	ble.n	80018e4 <timerRun+0x64>
		timer3_counter--;
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <timerRun+0xfc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	4a2a      	ldr	r2, [pc, #168]	; (800197c <timerRun+0xfc>)
 80018d4:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 80018d6:	4b29      	ldr	r3, [pc, #164]	; (800197c <timerRun+0xfc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	dc02      	bgt.n	80018e4 <timerRun+0x64>
			timer3_flag = 1;
 80018de:	4b28      	ldr	r3, [pc, #160]	; (8001980 <timerRun+0x100>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <timerRun+0x104>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	dd0b      	ble.n	8001904 <timerRun+0x84>
		timer4_counter--;
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <timerRun+0x104>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	4a24      	ldr	r2, [pc, #144]	; (8001984 <timerRun+0x104>)
 80018f4:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <timerRun+0x104>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	dc02      	bgt.n	8001904 <timerRun+0x84>
			timer4_flag = 1;
 80018fe:	4b22      	ldr	r3, [pc, #136]	; (8001988 <timerRun+0x108>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <timerRun+0x10c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	dd0b      	ble.n	8001924 <timerRun+0xa4>
		timer5_counter--;
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <timerRun+0x10c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3b01      	subs	r3, #1
 8001912:	4a1e      	ldr	r2, [pc, #120]	; (800198c <timerRun+0x10c>)
 8001914:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <timerRun+0x10c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	dc02      	bgt.n	8001924 <timerRun+0xa4>
			timer5_flag = 1;
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <timerRun+0x110>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0){
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <timerRun+0x114>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	dd0b      	ble.n	8001944 <timerRun+0xc4>
		timer6_counter--;
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <timerRun+0x114>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3b01      	subs	r3, #1
 8001932:	4a18      	ldr	r2, [pc, #96]	; (8001994 <timerRun+0x114>)
 8001934:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0){
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <timerRun+0x114>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	dc02      	bgt.n	8001944 <timerRun+0xc4>
			timer6_flag = 1;
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <timerRun+0x118>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer7_counter > 0){
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <timerRun+0x11c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	dd0b      	ble.n	8001964 <timerRun+0xe4>
			timer7_counter--;
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <timerRun+0x11c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3b01      	subs	r3, #1
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <timerRun+0x11c>)
 8001954:	6013      	str	r3, [r2, #0]
			if(timer7_counter <= 0){
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <timerRun+0x11c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	dc02      	bgt.n	8001964 <timerRun+0xe4>
				timer7_flag = 1;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <timerRun+0x120>)
 8001960:	2201      	movs	r2, #1
 8001962:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	2000009c 	.word	0x2000009c
 8001970:	200000a0 	.word	0x200000a0
 8001974:	200000a4 	.word	0x200000a4
 8001978:	200000a8 	.word	0x200000a8
 800197c:	200000ac 	.word	0x200000ac
 8001980:	200000b0 	.word	0x200000b0
 8001984:	200000b4 	.word	0x200000b4
 8001988:	200000b8 	.word	0x200000b8
 800198c:	200000bc 	.word	0x200000bc
 8001990:	200000c0 	.word	0x200000c0
 8001994:	200000c4 	.word	0x200000c4
 8001998:	200000c8 	.word	0x200000c8
 800199c:	200000cc 	.word	0x200000cc
 80019a0:	200000d0 	.word	0x200000d0

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_MspInit+0x5c>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <HAL_MspInit+0x5c>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6193      	str	r3, [r2, #24]
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_MspInit+0x5c>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_MspInit+0x5c>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <HAL_MspInit+0x5c>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	61d3      	str	r3, [r2, #28]
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_MspInit+0x5c>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_MspInit+0x60>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_MspInit+0x60>)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010000 	.word	0x40010000

08001a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a18:	d113      	bne.n	8001a42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_TIM_Base_MspInit+0x44>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <HAL_TIM_Base_MspInit+0x44>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_TIM_Base_MspInit+0x44>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	201c      	movs	r0, #28
 8001a38:	f000 f9a1 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a3c:	201c      	movs	r0, #28
 8001a3e:	f000 f9ba 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <NMI_Handler+0x4>

08001a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a96:	f000 f87f 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <TIM2_IRQHandler+0x10>)
 8001aa6:	f000 ffdb 	bl	8002a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200000d4 	.word	0x200000d4

08001ab4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ac0:	f7ff fff8 	bl	8001ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac4:	480b      	ldr	r0, [pc, #44]	; (8001af4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ac6:	490c      	ldr	r1, [pc, #48]	; (8001af8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001adc:	4c09      	ldr	r4, [pc, #36]	; (8001b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aea:	f001 fb05 	bl	80030f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aee:	f7ff fcc7 	bl	8001480 <main>
  bx lr
 8001af2:	4770      	bx	lr
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001afc:	08003194 	.word	0x08003194
  ldr r2, =_sbss
 8001b00:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001b04:	20000120 	.word	0x20000120

08001b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_2_IRQHandler>
	...

08001b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_Init+0x28>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <HAL_Init+0x28>)
 8001b16:	f043 0310 	orr.w	r3, r3, #16
 8001b1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 f923 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b22:	200f      	movs	r0, #15
 8001b24:	f000 f808 	bl	8001b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b28:	f7ff ff3c 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40022000 	.word	0x40022000

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_InitTick+0x54>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f93b 	bl	8001dd2 <HAL_SYSTICK_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d80a      	bhi.n	8001b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f000 f903 	bl	8001d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4a06      	ldr	r2, [pc, #24]	; (8001b94 <HAL_InitTick+0x5c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000058 	.word	0x20000058
 8001b90:	20000060 	.word	0x20000060
 8001b94:	2000005c 	.word	0x2000005c

08001b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_IncTick+0x1c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_IncTick+0x20>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a03      	ldr	r2, [pc, #12]	; (8001bb8 <HAL_IncTick+0x20>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	20000060 	.word	0x20000060
 8001bb8:	2000011c 	.word	0x2000011c

08001bbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <HAL_GetTick+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	2000011c 	.word	0x2000011c

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4906      	ldr	r1, [pc, #24]	; (8001c68 <__NVIC_EnableIRQ+0x34>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100

08001c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0a      	blt.n	8001c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	490c      	ldr	r1, [pc, #48]	; (8001cb8 <__NVIC_SetPriority+0x4c>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c94:	e00a      	b.n	8001cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4908      	ldr	r1, [pc, #32]	; (8001cbc <__NVIC_SetPriority+0x50>)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	0112      	lsls	r2, r2, #4
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	440b      	add	r3, r1
 8001caa:	761a      	strb	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f1c3 0307 	rsb	r3, r3, #7
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	bf28      	it	cs
 8001cde:	2304      	movcs	r3, #4
 8001ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d902      	bls.n	8001cf0 <NVIC_EncodePriority+0x30>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3b03      	subs	r3, #3
 8001cee:	e000      	b.n	8001cf2 <NVIC_EncodePriority+0x32>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	4313      	orrs	r3, r2
         );
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff90 	bl	8001c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff2d 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff42 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff90 	bl	8001cc0 <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5f 	bl	8001c6c <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff35 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffa2 	bl	8001d24 <SysTick_Config>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b08b      	sub	sp, #44	; 0x2c
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfe:	e148      	b.n	8002092 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e00:	2201      	movs	r2, #1
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	69fa      	ldr	r2, [r7, #28]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	f040 8137 	bne.w	800208c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4aa3      	ldr	r2, [pc, #652]	; (80020b0 <HAL_GPIO_Init+0x2c4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d05e      	beq.n	8001ee6 <HAL_GPIO_Init+0xfa>
 8001e28:	4aa1      	ldr	r2, [pc, #644]	; (80020b0 <HAL_GPIO_Init+0x2c4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d875      	bhi.n	8001f1a <HAL_GPIO_Init+0x12e>
 8001e2e:	4aa1      	ldr	r2, [pc, #644]	; (80020b4 <HAL_GPIO_Init+0x2c8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d058      	beq.n	8001ee6 <HAL_GPIO_Init+0xfa>
 8001e34:	4a9f      	ldr	r2, [pc, #636]	; (80020b4 <HAL_GPIO_Init+0x2c8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d86f      	bhi.n	8001f1a <HAL_GPIO_Init+0x12e>
 8001e3a:	4a9f      	ldr	r2, [pc, #636]	; (80020b8 <HAL_GPIO_Init+0x2cc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d052      	beq.n	8001ee6 <HAL_GPIO_Init+0xfa>
 8001e40:	4a9d      	ldr	r2, [pc, #628]	; (80020b8 <HAL_GPIO_Init+0x2cc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d869      	bhi.n	8001f1a <HAL_GPIO_Init+0x12e>
 8001e46:	4a9d      	ldr	r2, [pc, #628]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d04c      	beq.n	8001ee6 <HAL_GPIO_Init+0xfa>
 8001e4c:	4a9b      	ldr	r2, [pc, #620]	; (80020bc <HAL_GPIO_Init+0x2d0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d863      	bhi.n	8001f1a <HAL_GPIO_Init+0x12e>
 8001e52:	4a9b      	ldr	r2, [pc, #620]	; (80020c0 <HAL_GPIO_Init+0x2d4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d046      	beq.n	8001ee6 <HAL_GPIO_Init+0xfa>
 8001e58:	4a99      	ldr	r2, [pc, #612]	; (80020c0 <HAL_GPIO_Init+0x2d4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d85d      	bhi.n	8001f1a <HAL_GPIO_Init+0x12e>
 8001e5e:	2b12      	cmp	r3, #18
 8001e60:	d82a      	bhi.n	8001eb8 <HAL_GPIO_Init+0xcc>
 8001e62:	2b12      	cmp	r3, #18
 8001e64:	d859      	bhi.n	8001f1a <HAL_GPIO_Init+0x12e>
 8001e66:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <HAL_GPIO_Init+0x80>)
 8001e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6c:	08001ee7 	.word	0x08001ee7
 8001e70:	08001ec1 	.word	0x08001ec1
 8001e74:	08001ed3 	.word	0x08001ed3
 8001e78:	08001f15 	.word	0x08001f15
 8001e7c:	08001f1b 	.word	0x08001f1b
 8001e80:	08001f1b 	.word	0x08001f1b
 8001e84:	08001f1b 	.word	0x08001f1b
 8001e88:	08001f1b 	.word	0x08001f1b
 8001e8c:	08001f1b 	.word	0x08001f1b
 8001e90:	08001f1b 	.word	0x08001f1b
 8001e94:	08001f1b 	.word	0x08001f1b
 8001e98:	08001f1b 	.word	0x08001f1b
 8001e9c:	08001f1b 	.word	0x08001f1b
 8001ea0:	08001f1b 	.word	0x08001f1b
 8001ea4:	08001f1b 	.word	0x08001f1b
 8001ea8:	08001f1b 	.word	0x08001f1b
 8001eac:	08001f1b 	.word	0x08001f1b
 8001eb0:	08001ec9 	.word	0x08001ec9
 8001eb4:	08001edd 	.word	0x08001edd
 8001eb8:	4a82      	ldr	r2, [pc, #520]	; (80020c4 <HAL_GPIO_Init+0x2d8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ebe:	e02c      	b.n	8001f1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	623b      	str	r3, [r7, #32]
          break;
 8001ec6:	e029      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	623b      	str	r3, [r7, #32]
          break;
 8001ed0:	e024      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	3308      	adds	r3, #8
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e01f      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	330c      	adds	r3, #12
 8001ee2:	623b      	str	r3, [r7, #32]
          break;
 8001ee4:	e01a      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eee:	2304      	movs	r3, #4
 8001ef0:	623b      	str	r3, [r7, #32]
          break;
 8001ef2:	e013      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d105      	bne.n	8001f08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001efc:	2308      	movs	r3, #8
 8001efe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	611a      	str	r2, [r3, #16]
          break;
 8001f06:	e009      	b.n	8001f1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f08:	2308      	movs	r3, #8
 8001f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	615a      	str	r2, [r3, #20]
          break;
 8001f12:	e003      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
          break;
 8001f18:	e000      	b.n	8001f1c <HAL_GPIO_Init+0x130>
          break;
 8001f1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2bff      	cmp	r3, #255	; 0xff
 8001f20:	d801      	bhi.n	8001f26 <HAL_GPIO_Init+0x13a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	e001      	b.n	8001f2a <HAL_GPIO_Init+0x13e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2bff      	cmp	r3, #255	; 0xff
 8001f30:	d802      	bhi.n	8001f38 <HAL_GPIO_Init+0x14c>
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	e002      	b.n	8001f3e <HAL_GPIO_Init+0x152>
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	3b08      	subs	r3, #8
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	210f      	movs	r1, #15
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	6a39      	ldr	r1, [r7, #32]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8090 	beq.w	800208c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f6c:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <HAL_GPIO_Init+0x2dc>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a55      	ldr	r2, [pc, #340]	; (80020c8 <HAL_GPIO_Init+0x2dc>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <HAL_GPIO_Init+0x2dc>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f84:	4a51      	ldr	r2, [pc, #324]	; (80020cc <HAL_GPIO_Init+0x2e0>)
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a49      	ldr	r2, [pc, #292]	; (80020d0 <HAL_GPIO_Init+0x2e4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00d      	beq.n	8001fcc <HAL_GPIO_Init+0x1e0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a48      	ldr	r2, [pc, #288]	; (80020d4 <HAL_GPIO_Init+0x2e8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d007      	beq.n	8001fc8 <HAL_GPIO_Init+0x1dc>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a47      	ldr	r2, [pc, #284]	; (80020d8 <HAL_GPIO_Init+0x2ec>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d101      	bne.n	8001fc4 <HAL_GPIO_Init+0x1d8>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e004      	b.n	8001fce <HAL_GPIO_Init+0x1e2>
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x1e2>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_GPIO_Init+0x1e2>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	f002 0203 	and.w	r2, r2, #3
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	4093      	lsls	r3, r2
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fde:	493b      	ldr	r1, [pc, #236]	; (80020cc <HAL_GPIO_Init+0x2e0>)
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ff8:	4b38      	ldr	r3, [pc, #224]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	4937      	ldr	r1, [pc, #220]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	608b      	str	r3, [r1, #8]
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002006:	4b35      	ldr	r3, [pc, #212]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	43db      	mvns	r3, r3
 800200e:	4933      	ldr	r1, [pc, #204]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8002010:	4013      	ands	r3, r2
 8002012:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d006      	beq.n	800202e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002020:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	492d      	ldr	r1, [pc, #180]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	60cb      	str	r3, [r1, #12]
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800202e:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	43db      	mvns	r3, r3
 8002036:	4929      	ldr	r1, [pc, #164]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8002038:	4013      	ands	r3, r2
 800203a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4923      	ldr	r1, [pc, #140]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	43db      	mvns	r3, r3
 800205e:	491f      	ldr	r1, [pc, #124]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8002060:	4013      	ands	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4919      	ldr	r1, [pc, #100]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	43db      	mvns	r3, r3
 8002086:	4915      	ldr	r1, [pc, #84]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8002088:	4013      	ands	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	3301      	adds	r3, #1
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	f47f aeaf 	bne.w	8001e00 <HAL_GPIO_Init+0x14>
  }
}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	372c      	adds	r7, #44	; 0x2c
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	10320000 	.word	0x10320000
 80020b4:	10310000 	.word	0x10310000
 80020b8:	10220000 	.word	0x10220000
 80020bc:	10210000 	.word	0x10210000
 80020c0:	10120000 	.word	0x10120000
 80020c4:	10110000 	.word	0x10110000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40010800 	.word	0x40010800
 80020d4:	40010c00 	.word	0x40010c00
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40010400 	.word	0x40010400

080020e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	e001      	b.n	8002102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr

0800210e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	807b      	strh	r3, [r7, #2]
 800211a:	4613      	mov	r3, r2
 800211c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800211e:	787b      	ldrb	r3, [r7, #1]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002124:	887a      	ldrh	r2, [r7, #2]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800212a:	e003      	b.n	8002134 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	041a      	lsls	r2, r3, #16
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	611a      	str	r2, [r3, #16]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800213e:	b480      	push	{r7}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002150:	887a      	ldrh	r2, [r7, #2]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4013      	ands	r3, r2
 8002156:	041a      	lsls	r2, r3, #16
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	43d9      	mvns	r1, r3
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	400b      	ands	r3, r1
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e26c      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8087 	beq.w	800229e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002190:	4b92      	ldr	r3, [pc, #584]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b04      	cmp	r3, #4
 800219a:	d00c      	beq.n	80021b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800219c:	4b8f      	ldr	r3, [pc, #572]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d112      	bne.n	80021ce <HAL_RCC_OscConfig+0x5e>
 80021a8:	4b8c      	ldr	r3, [pc, #560]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d10b      	bne.n	80021ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b6:	4b89      	ldr	r3, [pc, #548]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d06c      	beq.n	800229c <HAL_RCC_OscConfig+0x12c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d168      	bne.n	800229c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e246      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x76>
 80021d8:	4b80      	ldr	r3, [pc, #512]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a7f      	ldr	r2, [pc, #508]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e02e      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x98>
 80021ee:	4b7b      	ldr	r3, [pc, #492]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a7a      	ldr	r2, [pc, #488]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b78      	ldr	r3, [pc, #480]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a77      	ldr	r2, [pc, #476]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e01d      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0xbc>
 8002212:	4b72      	ldr	r3, [pc, #456]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a71      	ldr	r2, [pc, #452]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b6f      	ldr	r3, [pc, #444]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6e      	ldr	r2, [pc, #440]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 800222c:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a6a      	ldr	r2, [pc, #424]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b68      	ldr	r3, [pc, #416]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a67      	ldr	r2, [pc, #412]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 800223e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002242:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fcb6 	bl	8001bbc <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002254:	f7ff fcb2 	bl	8001bbc <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1fa      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b5d      	ldr	r3, [pc, #372]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0xe4>
 8002272:	e014      	b.n	800229e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff fca2 	bl	8001bbc <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff fc9e 	bl	8001bbc <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e1e6      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	4b53      	ldr	r3, [pc, #332]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x10c>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d063      	beq.n	8002372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022aa:	4b4c      	ldr	r3, [pc, #304]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022b6:	4b49      	ldr	r3, [pc, #292]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d11c      	bne.n	80022fc <HAL_RCC_OscConfig+0x18c>
 80022c2:	4b46      	ldr	r3, [pc, #280]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d116      	bne.n	80022fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_RCC_OscConfig+0x176>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e1ba      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4939      	ldr	r1, [pc, #228]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	e03a      	b.n	8002372 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002304:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <HAL_RCC_OscConfig+0x270>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7ff fc57 	bl	8001bbc <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002312:	f7ff fc53 	bl	8001bbc <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e19b      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4927      	ldr	r1, [pc, #156]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002346:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <HAL_RCC_OscConfig+0x270>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fc36 	bl	8001bbc <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002354:	f7ff fc32 	bl	8001bbc <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e17a      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d03a      	beq.n	80023f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d019      	beq.n	80023ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <HAL_RCC_OscConfig+0x274>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238c:	f7ff fc16 	bl	8001bbc <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002394:	f7ff fc12 	bl	8001bbc <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e15a      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f000 fa9a 	bl	80028ec <RCC_Delay>
 80023b8:	e01c      	b.n	80023f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <HAL_RCC_OscConfig+0x274>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c0:	f7ff fbfc 	bl	8001bbc <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c6:	e00f      	b.n	80023e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c8:	f7ff fbf8 	bl	8001bbc <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d908      	bls.n	80023e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e140      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	42420000 	.word	0x42420000
 80023e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	4b9e      	ldr	r3, [pc, #632]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1e9      	bne.n	80023c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80a6 	beq.w	800254e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002406:	4b97      	ldr	r3, [pc, #604]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10d      	bne.n	800242e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b94      	ldr	r3, [pc, #592]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a93      	ldr	r2, [pc, #588]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	61d3      	str	r3, [r2, #28]
 800241e:	4b91      	ldr	r3, [pc, #580]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242a:	2301      	movs	r3, #1
 800242c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b8e      	ldr	r3, [pc, #568]	; (8002668 <HAL_RCC_OscConfig+0x4f8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d118      	bne.n	800246c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243a:	4b8b      	ldr	r3, [pc, #556]	; (8002668 <HAL_RCC_OscConfig+0x4f8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a8a      	ldr	r2, [pc, #552]	; (8002668 <HAL_RCC_OscConfig+0x4f8>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002446:	f7ff fbb9 	bl	8001bbc <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7ff fbb5 	bl	8001bbc <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	; 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0fd      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b81      	ldr	r3, [pc, #516]	; (8002668 <HAL_RCC_OscConfig+0x4f8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x312>
 8002474:	4b7b      	ldr	r3, [pc, #492]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a7a      	ldr	r2, [pc, #488]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	e02d      	b.n	80024de <HAL_RCC_OscConfig+0x36e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x334>
 800248a:	4b76      	ldr	r3, [pc, #472]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a75      	ldr	r2, [pc, #468]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6213      	str	r3, [r2, #32]
 8002496:	4b73      	ldr	r3, [pc, #460]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a72      	ldr	r2, [pc, #456]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	6213      	str	r3, [r2, #32]
 80024a2:	e01c      	b.n	80024de <HAL_RCC_OscConfig+0x36e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d10c      	bne.n	80024c6 <HAL_RCC_OscConfig+0x356>
 80024ac:	4b6d      	ldr	r3, [pc, #436]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4a6c      	ldr	r2, [pc, #432]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	6213      	str	r3, [r2, #32]
 80024b8:	4b6a      	ldr	r3, [pc, #424]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a69      	ldr	r2, [pc, #420]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6213      	str	r3, [r2, #32]
 80024c4:	e00b      	b.n	80024de <HAL_RCC_OscConfig+0x36e>
 80024c6:	4b67      	ldr	r3, [pc, #412]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a66      	ldr	r2, [pc, #408]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	4b64      	ldr	r3, [pc, #400]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a63      	ldr	r2, [pc, #396]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d015      	beq.n	8002512 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7ff fb69 	bl	8001bbc <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7ff fb65 	bl	8001bbc <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e0ab      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002504:	4b57      	ldr	r3, [pc, #348]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ee      	beq.n	80024ee <HAL_RCC_OscConfig+0x37e>
 8002510:	e014      	b.n	800253c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7ff fb53 	bl	8001bbc <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7ff fb4f 	bl	8001bbc <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e095      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	4b4c      	ldr	r3, [pc, #304]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ee      	bne.n	800251a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d105      	bne.n	800254e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002542:	4b48      	ldr	r3, [pc, #288]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	4a47      	ldr	r2, [pc, #284]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8081 	beq.w	800265a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002558:	4b42      	ldr	r3, [pc, #264]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d061      	beq.n	8002628 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d146      	bne.n	80025fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256c:	4b3f      	ldr	r3, [pc, #252]	; (800266c <HAL_RCC_OscConfig+0x4fc>)
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7ff fb23 	bl	8001bbc <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257a:	f7ff fb1f 	bl	8001bbc <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e067      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258c:	4b35      	ldr	r3, [pc, #212]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d108      	bne.n	80025b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025a2:	4b30      	ldr	r3, [pc, #192]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	492d      	ldr	r1, [pc, #180]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b4:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a19      	ldr	r1, [r3, #32]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	430b      	orrs	r3, r1
 80025c6:	4927      	ldr	r1, [pc, #156]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025cc:	4b27      	ldr	r3, [pc, #156]	; (800266c <HAL_RCC_OscConfig+0x4fc>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7ff faf3 	bl	8001bbc <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025da:	f7ff faef 	bl	8001bbc <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e037      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x46a>
 80025f8:	e02f      	b.n	800265a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <HAL_RCC_OscConfig+0x4fc>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff fadc 	bl	8001bbc <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002608:	f7ff fad8 	bl	8001bbc <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e020      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x498>
 8002626:	e018      	b.n	800265a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e013      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	429a      	cmp	r2, r3
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	40007000 	.word	0x40007000
 800266c:	42420060 	.word	0x42420060

08002670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0d0      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b6a      	ldr	r3, [pc, #424]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d910      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b67      	ldr	r3, [pc, #412]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 0207 	bic.w	r2, r3, #7
 800269a:	4965      	ldr	r1, [pc, #404]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0b8      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d020      	beq.n	8002702 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026cc:	4b59      	ldr	r3, [pc, #356]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a58      	ldr	r2, [pc, #352]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e4:	4b53      	ldr	r3, [pc, #332]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a52      	ldr	r2, [pc, #328]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f0:	4b50      	ldr	r3, [pc, #320]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	494d      	ldr	r1, [pc, #308]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d040      	beq.n	8002790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d115      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e07f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	4b41      	ldr	r3, [pc, #260]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e073      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273e:	4b3d      	ldr	r3, [pc, #244]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06b      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274e:	4b39      	ldr	r3, [pc, #228]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f023 0203 	bic.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4936      	ldr	r1, [pc, #216]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002760:	f7ff fa2c 	bl	8001bbc <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	e00a      	b.n	800277e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7ff fa28 	bl	8001bbc <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e053      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 020c 	and.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d1eb      	bne.n	8002768 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002790:	4b27      	ldr	r3, [pc, #156]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d210      	bcs.n	80027c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 0207 	bic.w	r2, r3, #7
 80027a6:	4922      	ldr	r1, [pc, #136]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e032      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027cc:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4916      	ldr	r1, [pc, #88]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	490e      	ldr	r1, [pc, #56]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027fe:	f000 f821 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8002802:	4602      	mov	r2, r0
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	490a      	ldr	r1, [pc, #40]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	5ccb      	ldrb	r3, [r1, r3]
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	4a09      	ldr	r2, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1cc>)
 8002818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_ClockConfig+0x1d0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff f98a 	bl	8001b38 <HAL_InitTick>

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40022000 	.word	0x40022000
 8002834:	40021000 	.word	0x40021000
 8002838:	08003168 	.word	0x08003168
 800283c:	20000058 	.word	0x20000058
 8002840:	2000005c 	.word	0x2000005c

08002844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800285e:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	2b04      	cmp	r3, #4
 800286c:	d002      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x30>
 800286e:	2b08      	cmp	r3, #8
 8002870:	d003      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x36>
 8002872:	e027      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002876:	613b      	str	r3, [r7, #16]
      break;
 8002878:	e027      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	0c9b      	lsrs	r3, r3, #18
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	4a17      	ldr	r2, [pc, #92]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d010      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	0c5b      	lsrs	r3, r3, #17
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	4a11      	ldr	r2, [pc, #68]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a0d      	ldr	r2, [pc, #52]	; (80028dc <HAL_RCC_GetSysClockFreq+0x98>)
 80028a6:	fb02 f203 	mul.w	r2, r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	e004      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	613b      	str	r3, [r7, #16]
      break;
 80028c2:	e002      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_GetSysClockFreq+0x98>)
 80028c6:	613b      	str	r3, [r7, #16]
      break;
 80028c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ca:	693b      	ldr	r3, [r7, #16]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	007a1200 	.word	0x007a1200
 80028e0:	08003178 	.word	0x08003178
 80028e4:	08003188 	.word	0x08003188
 80028e8:	003d0900 	.word	0x003d0900

080028ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <RCC_Delay+0x34>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <RCC_Delay+0x38>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	0a5b      	lsrs	r3, r3, #9
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002908:	bf00      	nop
  }
  while (Delay --);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1e5a      	subs	r2, r3, #1
 800290e:	60fa      	str	r2, [r7, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f9      	bne.n	8002908 <RCC_Delay+0x1c>
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	20000058 	.word	0x20000058
 8002924:	10624dd3 	.word	0x10624dd3

08002928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e041      	b.n	80029be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff f85a 	bl	8001a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	4619      	mov	r1, r3
 8002966:	4610      	mov	r0, r2
 8002968:	f000 fa6e 	bl	8002e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d001      	beq.n	80029e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e035      	b.n	8002a4c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <HAL_TIM_Base_Start_IT+0x90>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d009      	beq.n	8002a16 <HAL_TIM_Base_Start_IT+0x4e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0a:	d004      	beq.n	8002a16 <HAL_TIM_Base_Start_IT+0x4e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <HAL_TIM_Base_Start_IT+0x94>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d111      	bne.n	8002a3a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b06      	cmp	r3, #6
 8002a26:	d010      	beq.n	8002a4a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a38:	e007      	b.n	8002a4a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40012c00 	.word	0x40012c00
 8002a5c:	40000400 	.word	0x40000400

08002a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d122      	bne.n	8002abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d11b      	bne.n	8002abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0202 	mvn.w	r2, #2
 8002a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f9b4 	bl	8002e10 <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f9a7 	bl	8002dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f9b6 	bl	8002e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d122      	bne.n	8002b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d11b      	bne.n	8002b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0204 	mvn.w	r2, #4
 8002ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f98a 	bl	8002e10 <HAL_TIM_IC_CaptureCallback>
 8002afc:	e005      	b.n	8002b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f97d 	bl	8002dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f98c 	bl	8002e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d122      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d11b      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0208 	mvn.w	r2, #8
 8002b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f960 	bl	8002e10 <HAL_TIM_IC_CaptureCallback>
 8002b50:	e005      	b.n	8002b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f953 	bl	8002dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f962 	bl	8002e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d122      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b10      	cmp	r3, #16
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0210 	mvn.w	r2, #16
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f936 	bl	8002e10 <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f929 	bl	8002dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f938 	bl	8002e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d10e      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0201 	mvn.w	r2, #1
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe fd78 	bl	80016d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bee:	2b80      	cmp	r3, #128	; 0x80
 8002bf0:	d10e      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b80      	cmp	r3, #128	; 0x80
 8002bfe:	d107      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa6b 	bl	80030e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b40      	cmp	r3, #64	; 0x40
 8002c2a:	d107      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f8fc 	bl	8002e34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	d10e      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d107      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0220 	mvn.w	r2, #32
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fa36 	bl	80030d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_TIM_ConfigClockSource+0x1c>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e0b4      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x186>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc4:	d03e      	beq.n	8002d44 <HAL_TIM_ConfigClockSource+0xd4>
 8002cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cca:	f200 8087 	bhi.w	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd2:	f000 8086 	beq.w	8002de2 <HAL_TIM_ConfigClockSource+0x172>
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cda:	d87f      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002cdc:	2b70      	cmp	r3, #112	; 0x70
 8002cde:	d01a      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0xa6>
 8002ce0:	2b70      	cmp	r3, #112	; 0x70
 8002ce2:	d87b      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002ce4:	2b60      	cmp	r3, #96	; 0x60
 8002ce6:	d050      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x11a>
 8002ce8:	2b60      	cmp	r3, #96	; 0x60
 8002cea:	d877      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002cec:	2b50      	cmp	r3, #80	; 0x50
 8002cee:	d03c      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0xfa>
 8002cf0:	2b50      	cmp	r3, #80	; 0x50
 8002cf2:	d873      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002cf4:	2b40      	cmp	r3, #64	; 0x40
 8002cf6:	d058      	beq.n	8002daa <HAL_TIM_ConfigClockSource+0x13a>
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d86f      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002cfc:	2b30      	cmp	r3, #48	; 0x30
 8002cfe:	d064      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x15a>
 8002d00:	2b30      	cmp	r3, #48	; 0x30
 8002d02:	d86b      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d060      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x15a>
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d867      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d05c      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x15a>
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d05a      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x15a>
 8002d14:	e062      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6899      	ldr	r1, [r3, #8]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f000 f95e 	bl	8002fe6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	609a      	str	r2, [r3, #8]
      break;
 8002d42:	e04f      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f000 f947 	bl	8002fe6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d66:	609a      	str	r2, [r3, #8]
      break;
 8002d68:	e03c      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f000 f8be 	bl	8002ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2150      	movs	r1, #80	; 0x50
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f915 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002d88:	e02c      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6859      	ldr	r1, [r3, #4]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f000 f8dc 	bl	8002f54 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2160      	movs	r1, #96	; 0x60
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f905 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002da8:	e01c      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f000 f89e 	bl	8002ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2140      	movs	r1, #64	; 0x40
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f8f5 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002dc8:	e00c      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f000 f8ec 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002dda:	e003      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
      break;
 8002de0:	e000      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
	...

08002e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <TIM_Base_SetConfig+0xa8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d007      	beq.n	8002e70 <TIM_Base_SetConfig+0x28>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e66:	d003      	beq.n	8002e70 <TIM_Base_SetConfig+0x28>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a22      	ldr	r2, [pc, #136]	; (8002ef4 <TIM_Base_SetConfig+0xac>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d108      	bne.n	8002e82 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a1a      	ldr	r2, [pc, #104]	; (8002ef0 <TIM_Base_SetConfig+0xa8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d007      	beq.n	8002e9a <TIM_Base_SetConfig+0x52>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e90:	d003      	beq.n	8002e9a <TIM_Base_SetConfig+0x52>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <TIM_Base_SetConfig+0xac>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d108      	bne.n	8002eac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a07      	ldr	r2, [pc, #28]	; (8002ef0 <TIM_Base_SetConfig+0xa8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d103      	bne.n	8002ee0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	615a      	str	r2, [r3, #20]
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40000400 	.word	0x40000400

08002ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f023 0201 	bic.w	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f023 030a 	bic.w	r3, r3, #10
 8002f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	621a      	str	r2, [r3, #32]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f023 0210 	bic.w	r2, r3, #16
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	031b      	lsls	r3, r3, #12
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	621a      	str	r2, [r3, #32]
}
 8002fa8:	bf00      	nop
 8002faa:	371c      	adds	r7, #28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f043 0307 	orr.w	r3, r3, #7
 8002fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	609a      	str	r2, [r3, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b087      	sub	sp, #28
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003000:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	021a      	lsls	r2, r3, #8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	431a      	orrs	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4313      	orrs	r3, r2
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	609a      	str	r2, [r3, #8]
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003038:	2302      	movs	r3, #2
 800303a:	e041      	b.n	80030c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a14      	ldr	r2, [pc, #80]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d009      	beq.n	8003094 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003088:	d004      	beq.n	8003094 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d10c      	bne.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800309a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40000400 	.word	0x40000400

080030d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <__libc_init_array>:
 80030f8:	b570      	push	{r4, r5, r6, lr}
 80030fa:	2600      	movs	r6, #0
 80030fc:	4d0c      	ldr	r5, [pc, #48]	; (8003130 <__libc_init_array+0x38>)
 80030fe:	4c0d      	ldr	r4, [pc, #52]	; (8003134 <__libc_init_array+0x3c>)
 8003100:	1b64      	subs	r4, r4, r5
 8003102:	10a4      	asrs	r4, r4, #2
 8003104:	42a6      	cmp	r6, r4
 8003106:	d109      	bne.n	800311c <__libc_init_array+0x24>
 8003108:	f000 f822 	bl	8003150 <_init>
 800310c:	2600      	movs	r6, #0
 800310e:	4d0a      	ldr	r5, [pc, #40]	; (8003138 <__libc_init_array+0x40>)
 8003110:	4c0a      	ldr	r4, [pc, #40]	; (800313c <__libc_init_array+0x44>)
 8003112:	1b64      	subs	r4, r4, r5
 8003114:	10a4      	asrs	r4, r4, #2
 8003116:	42a6      	cmp	r6, r4
 8003118:	d105      	bne.n	8003126 <__libc_init_array+0x2e>
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003120:	4798      	blx	r3
 8003122:	3601      	adds	r6, #1
 8003124:	e7ee      	b.n	8003104 <__libc_init_array+0xc>
 8003126:	f855 3b04 	ldr.w	r3, [r5], #4
 800312a:	4798      	blx	r3
 800312c:	3601      	adds	r6, #1
 800312e:	e7f2      	b.n	8003116 <__libc_init_array+0x1e>
 8003130:	0800318c 	.word	0x0800318c
 8003134:	0800318c 	.word	0x0800318c
 8003138:	0800318c 	.word	0x0800318c
 800313c:	08003190 	.word	0x08003190

08003140 <memset>:
 8003140:	4603      	mov	r3, r0
 8003142:	4402      	add	r2, r0
 8003144:	4293      	cmp	r3, r2
 8003146:	d100      	bne.n	800314a <memset+0xa>
 8003148:	4770      	bx	lr
 800314a:	f803 1b01 	strb.w	r1, [r3], #1
 800314e:	e7f9      	b.n	8003144 <memset+0x4>

08003150 <_init>:
 8003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003152:	bf00      	nop
 8003154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003156:	bc08      	pop	{r3}
 8003158:	469e      	mov	lr, r3
 800315a:	4770      	bx	lr

0800315c <_fini>:
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	bf00      	nop
 8003160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003162:	bc08      	pop	{r3}
 8003164:	469e      	mov	lr, r3
 8003166:	4770      	bx	lr
